// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package quickswap_v3_factory

import (
	"errors"
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IQuickswapV3FactoryMetaData contains all meta data concerning the IQuickswapV3Factory contract.
var IQuickswapV3FactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFarmingAddress\",\"type\":\"address\"}],\"name\":\"FarmingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"alpha1\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"alpha2\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"beta1\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"beta2\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"gamma1\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"gamma2\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"volumeBeta\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"volumeGamma\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"baseFee\",\"type\":\"uint16\"}],\"name\":\"FeeConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Owner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"Pool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVaultAddress\",\"type\":\"address\"}],\"name\":\"VaultAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseFeeConfiguration\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"alpha1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"alpha2\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"beta1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"beta2\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"gamma1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"gamma2\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"volumeBeta\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"volumeGamma\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"baseFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolByPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"alpha1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"alpha2\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"beta1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"beta2\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"gamma1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"gamma2\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"volumeBeta\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"volumeGamma\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"baseFee\",\"type\":\"uint16\"}],\"name\":\"setBaseFeeConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmingAddress\",\"type\":\"address\"}],\"name\":\"setFarmingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101c0604052610b5460a0819052612ee060c05261016860e05261ea6061010052603b6101205261213461014052600061016052600a6101805260646101a0526003805461ffff191690911763ffff00001916632ee000001763ffffffff60201b1916650168000000001763ffffffff60401b191669ea6000000000000000001761ffff60601b19166c3b0000000000000000000000001761ffff60701b191661084d60721b1765ffffffffffff60801b1916600560a11b1761ffff60b01b1916601960b21b1790553480156100d457600080fd5b506040516135863803806135868339810160408190526100f391610182565b600080546001600160a01b03191633908117825560405190917fa5e220c2c27d986cc8efeafa8f34ba6ea6bf96a34e146b29b6bdd8587771b13091a260609190911b6001600160601b031916608052600280546001600160a01b0319166001600160a01b039092169190911790556101b4565b80516001600160a01b038116811461017d57600080fd5b919050565b60008060408385031215610194578182fd5b61019d83610166565b91506101ab60208401610166565b90509250929050565b60805160601c6133ab6101db600039806101ef52806107b152806108e152506133ab6000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806313af40351461009e5780633119049a146100b3578063430bf08a146100d15780635d6d7e93146100d957806385535cc5146100ec5780638a2ade58146100ff5780638da5cb5b146101075780639832853a1461010f578063b001f6181461012c578063d9a641e11461013f578063e343361514610152575b600080fd5b6100b16100ac3660046109b2565b610165565b005b6100bb6101ed565b6040516100c89190610b15565b60405180910390f35b6100bb610211565b6100b16100e7366004610a29565b610220565b6100b16100fa3660046109b2565b6104b6565b6100bb61053e565b6100bb61054d565b61011761055c565b6040516100c899989796959493929190610c7a565b6100b161013a3660046109b2565b6105bc565b6100bb61014d3660046109f1565b610644565b6100bb6101603660046109f1565b61066a565b6000546001600160a01b0316331461017c57600080fd5b6000546001600160a01b038281169116141561019757600080fd5b6040516001600160a01b038216907fa5e220c2c27d986cc8efeafa8f34ba6ea6bf96a34e146b29b6bdd8587771b13090600090a2600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b6000546001600160a01b0316331461023757600080fd5b61ffff8981168982160182821601111561026c5760405162461bcd60e51b815260040161026390610b9a565b60405180910390fd5b61ffff851615801590610282575061ffff841615155b8015610291575061ffff821615155b6102ad5760405162461bcd60e51b815260040161026390610b6e565b6040518061012001604052808a61ffff1681526020018961ffff1681526020018863ffffffff1681526020018763ffffffff1681526020018661ffff1681526020018561ffff1681526020018463ffffffff1681526020018361ffff1681526020018261ffff16815250600360008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060608201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550608082015181600001600c6101000a81548161ffff021916908361ffff16021790555060a082015181600001600e6101000a81548161ffff021916908361ffff16021790555060c08201518160000160106101000a81548163ffffffff021916908363ffffffff16021790555060e08201518160000160146101000a81548161ffff021916908361ffff1602179055506101008201518160000160166101000a81548161ffff021916908361ffff1602179055509050507f4035ab409f15e202f9f114632e1fb14a0552325955722be18503403e7f98730c8989898989898989896040516104a399989796959493929190610c7a565b60405180910390a1505050505050505050565b6000546001600160a01b031633146104cd57600080fd5b6002546001600160a01b03828116911614156104e857600080fd5b6040516001600160a01b038216907fb9c265ae4414f501736ec5d4961edc3309e4385eb2ff3feeecb30fb36621dd8390600090a2600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b6000546001600160a01b031681565b60035461ffff8082169162010000810482169163ffffffff600160201b8304811692600160401b8104821692600160601b8204811692600160701b8304821692600160801b810490911691600160a01b8204811691600160b01b90041689565b6000546001600160a01b031633146105d357600080fd5b6001546001600160a01b03828116911614156105ee57600080fd5b6040516001600160a01b038216907f56b9e8342f530796ceed0d5529abdcdeae6e4f2ac1dc456ceb73bbda898e0cd390600090a2600180546001600160a01b0319166001600160a01b0392909216919091179055565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6000816001600160a01b0316836001600160a01b0316141561068b57600080fd5b600080836001600160a01b0316856001600160a01b0316106106ae5783856106b1565b84845b90925090506001600160a01b0382166106c957600080fd5b6001600160a01b038281166000908152600460209081526040808320858516845290915290205416156106fb57600080fd5b600061070783836108dd565b6040516107139061097a565b61071d9190610b15565b604051809103906000f080158015610739573d6000803e3d6000fd5b50604051631c7004cb60e01b81529091506001600160a01b03821690631c7004cb9061076a90600390600401610bc4565b600060405180830381600087803b15801561078457600080fd5b505af1158015610798573d6000803e3d6000fd5b5050604051637ec15b9d60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063fd82b73a91506107ee908490309088908890600401610b43565b602060405180830381600087803b15801561080857600080fd5b505af115801561081c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084091906109d5565b6001600160a01b03808516600081815260046020818152604080842089871680865290835281852080549789166001600160a01b031998891681179091559383528185208686529092529283902080549095169091179093555192965090917f91ccaa7a278130b65168c3a0c8d3bcae84cf5e43704342bd3ec0b59e59c036db906108cc908890610b15565b60405180910390a350505092915050565b60007f00000000000000000000000000000000000000000000000000000000000000008383604051602001610913929190610b29565b60408051601f1981840301815290829052805160209182012061095b939290917f6ec6c9c8091d160c0aa74b2b14ba9c1717e95093bd3ac085cee99a49aab294a49101610ae2565b60408051601f1981840301815291905280516020909101209392505050565b6126b780610ce883390190565b803561ffff8116811461099957600080fd5b919050565b803563ffffffff8116811461099957600080fd5b6000602082840312156109c3578081fd5b81356109ce81610ccf565b9392505050565b6000602082840312156109e6578081fd5b81516109ce81610ccf565b60008060408385031215610a03578081fd5b8235610a0e81610ccf565b91506020830135610a1e81610ccf565b809150509250929050565b60008060008060008060008060006101208a8c031215610a47578485fd5b610a508a610987565b9850610a5e60208b01610987565b9750610a6c60408b0161099e565b9650610a7a60608b0161099e565b9550610a8860808b01610987565b9450610a9660a08b01610987565b9350610aa460c08b0161099e565b9250610ab260e08b01610987565b9150610ac16101008b01610987565b90509295985092959850929598565b61ffff169052565b63ffffffff169052565b6001600160f81b0319815260609390931b6001600160601b03191660018401526015830191909152603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b602080825260129082015271047616d6d6173206d757374206265203e20360741b604082015260600190565b60208082526010908201526f13585e0819995948195e18d95959195960821b604082015260600190565b815461012082019061ffff610bdb84828416610ad0565b610bed60208501828460101c16610ad0565b63ffffffff610c0460408601828560201c16610ad8565b610c1660608601828560401c16610ad8565b610c2860808601838560601c16610ad0565b610c3a60a08601838560701c16610ad0565b610c4c60c08601828560801c16610ad8565b50610c5f60e08501828460a01c16610ad0565b610c726101008501828460b01c16610ad0565b505092915050565b61ffff998a168152978916602089015263ffffffff96871660408901529486166060880152928716608087015290861660a086015290921660c084015290831660e08301529091166101008201526101200190565b6001600160a01b0381168114610ce457600080fd5b5056fe60c06040523480156200001157600080fd5b50604051620026b7380380620026b7833981016040819052620000349162000051565b33606090811b60a0521b6001600160601b03191660805262000081565b60006020828403121562000063578081fd5b81516001600160a01b03811681146200007a578182fd5b9392505050565b60805160601c60a05160601c6125ee620000c9600039806102ba52806102e35250806101f152806104b65280610638528061070c528061077c528061089c52506125ee6000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806314c540791461009e5780631c7004cb146100ca5780631dd486f2146100df5780631e5eb1d0146100ff57806336e52fee1461011c578063461645bf1461013c578063475fb80c1461015157806374eceae614610164578063bc2e01811461018a578063c53a182f146101ab578063fd31e988146101be575b600080fd5b6100b16100ac366004611fc8565b6101e1565b6040516100c19493929190612198565b60405180910390f35b6100dd6100d8366004611d76565b6102af565b005b6100f26100ed366004611ddc565b6104a9565b6040516100c1919061236c565b61010761050c565b6040516100c19998979695949392919061237b565b61012f61012a366004611d8e565b61056e565b6040516100c19190612358565b610144610626565b6040516100c191906123d0565b6100dd61015f366004611f3d565b61062d565b610177610172366004611e44565b610685565b6040516100c1979695949392919061213f565b61019d610198366004611f71565b6106fe565b6040516100c192919061233f565b6100f26101b9366004611f71565b61076f565b6101d16101cc366004611e5c565b61088c565b6040516100c1949392919061209c565b6000808080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102375760405162461bcd60e51b815260040161022e906121f6565b60405180910390fd5b6000600187018161ffff821662010000811061024f57fe5b600202015460ff1615610260578091505b6000610271818d8d8d8d888e6108fb565b60408101516060820151608083015160c090930151919f909e506001600160581b039092169c506001600160901b03169a5098505050505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061038757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561033a57600080fd5b505afa15801561034e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103729190611d4f565b6001600160a01b0316336001600160a01b0316145b61039057600080fd5b61ffff6103a561012083016101008401611dc0565b61ffff166103b96040840160208501611dc0565b61ffff166103ca6020850185611dc0565b61ffff16010111156103ee5760405162461bcd60e51b815260040161022e90612227565b6103fe60a0820160808301611dc0565b61ffff1615801590610422575061041b60c0820160a08301611dc0565b61ffff1615155b8015610441575061043a610100820160e08301611dc0565b61ffff1615155b61045d5760405162461bcd60e51b815260040161022e906121ca565b806202000061046c8282612401565b9050507f86821edb04a8df5bac675c23c1eb986257da59363579c86d977a66fa59896b9d8160405161049e9190612251565b60405180910390a150565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104f35760405162461bcd60e51b815260040161022e906121f6565b61050260008787878787610eca565b9695505050505050565b620200005461ffff8082169162010000810482169163ffffffff600160201b8304811692600160401b8104821692600160601b8204811692600160701b8304821692600160801b810490911691600160a01b8204811691600160b01b90041689565b60008061057a83611178565b61058385611178565b0290506000600160c01b82106105c8576000866001600160801b0316116105ab5760016105ad565b855b6001600160801b0316600019816105c057fe5b0490506105fb565b6000866001600160801b0316116105e05760016105e2565b855b6001600160801b0316604083901b816105f757fe5b0490505b610c3560451b811061061657610c3560451b9250505061061f565b915061061f9050565b9392505050565b6201518090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106755760405162461bcd60e51b815260040161022e906121f6565b610681600083836112c8565b5050565b60008162010000811061069757600080fd5b600290810291909101805460019091015460ff82169350610100820463ffffffff1692600160281b830460060b92600160601b90046001600160a01b0316916001600160581b03811691600160581b8204900b90600160701b90046001600160901b031687565b600080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107495760405162461bcd60e51b815260040161022e906121f6565b610757600087878787611327565b6001600160581b039091169250905094509492505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107b95760405162461bcd60e51b815260040161022e906121f6565b6000806107c98188888888611327565b9150915061087f600f836001600160581b0316816107e357fe5b6040805161012081018252620200005461ffff80821683526201000082048116602084015263ffffffff600160201b8304811694840194909452600160401b820484166060840152600160601b820481166080840152600160701b8204811660a0840152600160801b820490931660c0830152600160a01b8104831660e0830152600160b01b90049091166101008201529190049083906114a6565b925050505b949350505050565b6060808080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108d95760405162461bcd60e51b815260040161022e906121f6565b6108e860008a8a8a8a8a611538565b929c919b50995090975095505050505050565b610903611ccf565b85870363ffffffff871615806109405750610940898661ffff1662010000811061092957fe5b6002020154610100900463ffffffff16828a61176c565b15610ac3576000898661ffff1662010000811061095957fe5b6040805160e081018252600292830293909301805460ff811615158552610100810463ffffffff90811660208701819052600160281b8304600690810b810b900b94870194909452600160601b9091046001600160a01b031660608601526001909101546001600160581b0381166080860152600160581b8104840b840b90930b60a0850152600160701b9092046001600160901b031660c084015291925083161415610a09579150610ebf9050565b6000610a228b8b8a8a8a87602001518860400151611795565b90508761ffff88811690881614610aa857610a3b611ccf565b60008d60018b0361ffff16620100008110610a5257fe5b60020201805463ffffffff610100820481166020808701829052600160281b909304600690810b810b810b6040808901829052948b0151948b0151959650919093039091169203900b81610aa257fe5b05925050505b610ab883858b848a8760006118ff565b945050505050610ebf565b610ad8898561ffff1662010000811061092957fe5b610b0f576040805162461bcd60e51b815260206004820152600360248201526213d31160ea1b604482015290519081900360640190fd5b600080610b1f8b8b858a8a611a03565b6040518060e00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160059054906101000a900460060b60060b60060b815260200160008201600c9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160581b03166001600160581b03166001600160581b0316815260200160018201600b9054906101000a900460020b60020b60020b815260200160018201600e9054906101000a90046001600160901b03166001600160901b03166001600160901b03168152505091506040518060e00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160059054906101000a900460060b60060b60060b815260200160008201600c9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160581b03166001600160581b03166001600160581b0316815260200160018201600b9054906101000a900460020b60020b60020b815260200160018201600e9054906101000a90046001600160901b03166001600160901b03166001600160901b0316815250509150806020015163ffffffff168363ffffffff161415610d6b579250610ebf915050565b816020015163ffffffff168363ffffffff1614610eba5760008260200151826020015103905060008360200151850390508063ffffffff168263ffffffff16856040015185604001510360060b81610dbf57fe5b0502846040018181510191509060060b908160060b815250508163ffffffff168163ffffffff1685606001518560600151036001600160a01b03160281610e0257fe5b0484606001818151019150906001600160a01b031690816001600160a01b0316815250508063ffffffff168263ffffffff1685608001518560800151036001600160581b031681610e4f57fe5b040284608001818151019150906001600160581b031690816001600160581b0316815250508063ffffffff168263ffffffff168560c001518560c00151036001600160901b031681610e9d57fe5b60c0870180516001600160901b0393909204939093020116905250505b509150505b979650505050505050565b600080878761ffff16620100008110610edf57fe5b60020201805490915063ffffffff878116610100909204161415610f065786915050610502565b6040805160e081018252825460ff811615158252610100810463ffffffff166020830152600160281b8104600690810b810b900b92820192909252600160601b9091046001600160a01b031660608201526001808301546001600160581b0381166080840152600160581b8104600290810b810b900b60a0840152600160701b90046001600160901b031660c08301528801925060008961ffff8516620100008110610fae57fe5b600202015460ff1615610fbe5750825b6000610fd78b8a8a8d8688602001518960400151611795565b90508761ffff8b8116908416146110485760008c60018d0361ffff16620100008110610fff57fe5b6002020180546020870151604088015192935063ffffffff6101008304811693600160281b909304600690810b939285900390911691839003900b8161104157fe5b0593505050505b611057848b8b848c878d6118ff565b8c8761ffff1662010000811061106957fe5b825160029182029290920180546020850151604086015160608701516001600160a01b0316600160601b026001600160601b0360069290920b66ffffffffffffff16600160281b02600160281b600160601b031963ffffffff9094166101000264ffffffff001998151560ff1990961695909517979097169390931791909116949094179390931692909217825560808301516001909201805460a085015160c0909501516001600160901b0316600160701b026001600160701b039590930b62ffffff16600160581b0262ffffff60581b196001600160581b039095166001600160581b03199092169190911793909316929092179290921691909117905550505050509695505050505050565b600060ff82901d8083188190038061119357600092506112c1565b806001600160801b82106111ac5760809190911c9060401b5b600160401b82106111c25760409190911c9060201b5b600160201b82106111d85760209190911c9060101b5b6201000082106111ed5760109190911c9060081b5b61010082106112015760089190911c9060041b5b601082106112145760049190911c9060021b5b600882106112205760011b5b600181848161122b57fe5b048201901c9050600181848161123d57fe5b048201901c9050600181848161124f57fe5b048201901c9050600181848161126157fe5b048201901c9050600181848161127357fe5b048201901c9050600181848161128557fe5b048201901c9050600181848161129757fe5b048201901c905060008184816112a957fe5b0490508082106112b957806112bb565b815b95505050505b5050919050565b825460ff16156112d757600080fd5b825463ffffffff9290921661010002600160ff19909316831764ffffffff0019161783559101805462ffffff60581b1916600160581b62ffffff60029490940b9390931692909202919091179055565b6000808087600186018161ffff821662010000811061134257fe5b600202015460ff161561136b57898161ffff1662010000811061136157fe5b6002020191508092505b600061137d8b8b60008c8c898d6108fb565b8354909150610100900463ffffffff1661139e816201517f198d018d61176c565b156114065760006113b78d8d620151808e8e8b8f6108fb565b90506201518063ffffffff1681608001518460800151036001600160581b0316816113de57fe5b0460398260c001518560c00151036001600160901b0316901c9750975050505050505061149c565b8063ffffffff168b63ffffffff16146114965760008460010160009054906101000a90046001600160581b03169050600085600101600e9054906101000a90046001600160901b03169050828d0363ffffffff16828560800151036001600160581b03168161147157fe5b046039828660c00151036001600160901b0316901c985098505050505050505061149c565b50505050505b9550959350505050565b6000806114d0856001600160581b03168460a001518560200151866060015163ffffffff16611b0a565b6114f7866001600160581b031685608001518660000151876040015163ffffffff16611b0a565b01905061ffff811115611509575061ffff5b611523848460e00151838660c0015163ffffffff16611b0a565b83610100015161ffff16019150509392505050565b60608060608087516001600160401b038111801561155557600080fd5b5060405190808252806020026020018201604052801561157f578160200160208202803683370190505b50935087516001600160401b038111801561159957600080fd5b506040519080825280602002602001820160405280156115c3578160200160208202803683370190505b50925087516001600160401b03811180156115dd57600080fd5b50604051908082528060200260200182016040528015611607578160200160208202803683370190505b50915087516001600160401b038111801561162157600080fd5b5060405190808252806020026020018201604052801561164b578160200160208202803683370190505b5090506000600187018b61ffff821662010000811061166657fe5b600202015460ff1615611677578091505b61167f611ccf565b60005b8b5181101561175b576116ad8e8e8e848151811061169c57fe5b60200260200101518e8e898f6108fb565b91508160400151826060015183608001518460c00151816001600160581b03169150806001600160901b031690508b85815181106116e757fe5b602002602001018b86815181106116fa57fe5b602002602001018b878151811061170d57fe5b602002602001018b888151811061172057fe5b60209081029190910101939093526001600160701b039093169091526001600160a01b039092169052600691820b90910b9052600101611682565b505050509650965096509692505050565b63ffffffff80821684821681109184161181141561061f57505063ffffffff9081169116111590565b600080888561ffff166201000081106117aa57fe5b6002020154610100900463ffffffff16905060008961ffff87166201000081106117d057fe5b6002020154600160281b900460060b90506117f2826201517f198b018b61176c565b156118b85761180785620151808b038b61176c565b156118755760018703965060008a8861ffff1662010000811061182657fe5b60020201805490915060ff1661183f578860020b61186a565b805463ffffffff6101008204811688031690600160281b9004600690810b8703900b8161186857fe5b055b60060b9350506118b3565b600061188a8b8b620151808c8c8c60006108fb565b9050620151808a87030163ffffffff168160400151860360060b816118ab57fe5b0560060b9350505b6118f2565b8163ffffffff168563ffffffff16146118e75781850363ffffffff1681850360060b816118e157fe5b056118ec565b8760020b5b60060b92505b5050979650505050505050565b611907611ccf565b60208801805160018a5263ffffffff89811690925260408a018051918a0392831660028a900b02909101600690810b900b90526001600160801b03851661194f576001611951565b845b6001600160801b031663ffffffff60801b608083901b168161196f57fe5b0489606001818151019150906001600160a01b031690816001600160a01b0316815250506119b68163ffffffff168760020b8960020b8c60a0015160020b8860020b611bb2565b60808a018051919091016001600160581b031690525050600291820b90910b60a087015260c0860180516001600160801b03929092169091016001600160901b0316905250929392505050565b60008061ffff8084169082908616821115611a2757620100008661ffff1601611a2d565b8561ffff165b905081810160011c5b898161ffff16620100008110611a4857fe5b60020201805490955060ff811690610100900463ffffffff168115611af557611a72818b8d61176c565b15611ae9578b8360010161ffff16620100008110611a8c57fe5b60020201805490965060ff811690610100900463ffffffff168115611ad257611ab68c828f61176c565b15611ac7575050505050505061149c565b846001019650611ae2565b5087965061149c95505050505050565b5050611af0565b6001830393505b611afc565b8260010194505b50505081810160011c611a36565b600081851115611b645781850394508361ffff166006028510611b32575061ffff8216610884565b600861ffff85160a6000611b47878784611c07565b9050808201818661ffff160281611b5a57fe5b0492505050610884565b93810393600661ffff8516028510611b7e57506000610884565b600861ffff85160a6000611b93878784611c07565b8201905080828661ffff160281611ba657fe5b04979650505050505050565b6000828203858503038386038702600180890189026002808b02929092018102916006818c0a81029180870a8502868802850283020190860a8d029091020181611bf857fe5b059a9950505050505050505050565b808361ffff84168281611c1657fe5b049250828102820191508361ffff168381611c2d57fe5b0492508402600281840204820191508361ffff168381611c4957fe5b0492508402600681840204820191508361ffff168381611c6557fe5b0492508402601881840204820191508361ffff168381611c8157fe5b0492508402607881840204820191508361ffff168381611c9d57fe5b04925084026102d08184020491909101908402619d80818602046113b061ffff86168302040182019150509392505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b8035600281900b8114611d1d57600080fd5b919050565b80356001600160801b0381168114611d1d57600080fd5b8035611d1d816125bc565b8035611d1d816125cf565b600060208284031215611d60578081fd5b81516001600160a01b038116811461061f578182fd5b60006101208284031215611d88578081fd5b50919050565b600080600060608486031215611da2578182fd5b611dab84611d22565b95602085013595506040909401359392505050565b600060208284031215611dd1578081fd5b813561061f816125bc565b600080600080600060a08688031215611df3578081fd5b8535611dfe816125bc565b94506020860135611e0e816125cf565b9350611e1c60408701611d0b565b9250611e2a60608701611d22565b9150611e3860808701611d22565b90509295509295909350565b600060208284031215611e55578081fd5b5035919050565b600080600080600060a08688031215611e73578081fd5b8535611e7e816125cf565b94506020868101356001600160401b0380821115611e9a578384fd5b818901915089601f830112611ead578384fd5b813581811115611eb957fe5b83810260405185828201018181108582111715611ed257fe5b604052828152858101935084860182860187018e1015611ef0578788fd5b8795505b83861015611f1957611f0581611d44565b855260019590950194938601938601611ef4565b50809950505050505050611f2f60408701611d0b565b9250611e2a60608701611d39565b60008060408385031215611f4f578182fd5b8235611f5a816125cf565b9150611f6860208401611d0b565b90509250929050565b60008060008060808587031215611f86578384fd5b8435611f91816125cf565b9350611f9f60208601611d0b565b92506040850135611faf816125bc565b9150611fbd60608601611d22565b905092959194509250565b600080600080600060a08688031215611fdf578081fd5b8535611fea816125cf565b94506020860135611ffa816125cf565b935061200860408701611d0b565b92506060860135611e2a816125bc565b6000815180845260208085019450808401835b838110156120505781516001600160701b03168752958201959082019060010161202b565b509495945050505050565b6000815180845260208085019450808401835b838110156120505781518752958201959082019060010161206e565b61ffff169052565b63ffffffff169052565b6080808252855190820181905260009060209060a0840190828901845b828110156120d857815160060b845292840192908401906001016120b9565b50505083810382850152865180825287830191830190845b818110156121155783516001600160a01b0316835292840192918401916001016120f0565b505084810360408601526121298188612018565b925050508281036060840152610ebf818561205b565b961515875263ffffffff95909516602087015260069390930b60408601526001600160a01b039190911660608501526001600160581b0316608084015260020b60a08301526001600160901b031660c082015260e00190565b60069490940b84526001600160a01b039290921660208401526001600160701b03166040830152606082015260800190565b602080825260129082015271047616d6d6173206d757374206265203e20360741b604082015260600190565b6020808252601790820152766f6e6c7920706f6f6c2063616e2063616c6c207468697360481b604082015260600190565b60208082526010908201526f13585e0819995948195e18d95959195960821b604082015260600190565b61012081018235612261816125bc565b61ffff16825261227360208401611d39565b612280602084018261208a565b5061228d60408401611d44565b61229a6040840182612092565b506122a760608401611d44565b6122b46060840182612092565b506122c160808401611d39565b6122ce608084018261208a565b506122db60a08401611d39565b6122e860a084018261208a565b506122f560c08401611d44565b61230260c0840182612092565b5061230f60e08401611d39565b61231c60e084018261208a565b5061010061232b818501611d39565b6123378285018261208a565b505092915050565b6001600160701b03929092168252602082015260400190565b6001600160801b0391909116815260200190565b61ffff91909116815260200190565b61ffff998a168152978916602089015263ffffffff96871660408901529486166060880152928716608087015290861660a086015290921660c084015290831660e08301529091166101008201526101200190565b63ffffffff91909116815260200190565b600081356123ee816125bc565b92915050565b600081356123ee816125cf565b813561240c816125bc565b815461ffff191661ffff9190911617808255602083013561242c816125bc565b63ffff00008160101b1663ffff00001983161783555050612458612452604084016123f4565b82612576565b61246d612467606084016123f4565b82612599565b61248261247c608084016123e1565b826124d7565b61249761249160a084016123e1565b826124f6565b6124ac6124a660c084016123f4565b82612515565b6124c16124bb60e084016123e1565b82612538565b6106816124d161010084016123e1565b82612557565b805461ffff60601b191660609290921b61ffff60601b16919091179055565b805461ffff60701b191660709290921b61ffff60701b16919091179055565b805463ffffffff60801b191660809290921b63ffffffff60801b16919091179055565b805461ffff60a01b191660a09290921b61ffff60a01b16919091179055565b805461ffff60b01b191660b09290921b61ffff60b01b16919091179055565b805463ffffffff60201b191660209290921b63ffffffff60201b16919091179055565b805463ffffffff60401b191660409290921b63ffffffff60401b16919091179055565b61ffff811681146125cc57600080fd5b50565b63ffffffff811681146125cc57600080fdfea164736f6c6343000706000aa164736f6c6343000706000a",
}

// IQuickswapV3FactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use IQuickswapV3FactoryMetaData.ABI instead.
var IQuickswapV3FactoryABI = IQuickswapV3FactoryMetaData.ABI

// IQuickswapV3FactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use IQuickswapV3FactoryMetaData.Bin instead.
var IQuickswapV3FactoryBin = IQuickswapV3FactoryMetaData.Bin

// DeployIQuickswapV3Factory deploys a new Ethereum contract, binding an instance of IQuickswapV3Factory to it.
func DeployIQuickswapV3Factory(auth *bind.TransactOpts, backend bind.ContractBackend, _poolDeployer common.Address, _vaultAddress common.Address) (common.Address, *types.Transaction, *IQuickswapV3Factory, error) {
	parsed, err := IQuickswapV3FactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(IQuickswapV3FactoryBin), backend, _poolDeployer, _vaultAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IQuickswapV3Factory{IQuickswapV3FactoryCaller: IQuickswapV3FactoryCaller{contract: contract}, IQuickswapV3FactoryTransactor: IQuickswapV3FactoryTransactor{contract: contract}, IQuickswapV3FactoryFilterer: IQuickswapV3FactoryFilterer{contract: contract}}, nil
}

// IQuickswapV3Factory is an auto generated Go binding around an Ethereum contract.
type IQuickswapV3Factory struct {
	IQuickswapV3FactoryCaller     // Read-only binding to the contract
	IQuickswapV3FactoryTransactor // Write-only binding to the contract
	IQuickswapV3FactoryFilterer   // Log filterer for contract events
}

// IQuickswapV3FactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type IQuickswapV3FactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IQuickswapV3FactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IQuickswapV3FactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IQuickswapV3FactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IQuickswapV3FactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IQuickswapV3FactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IQuickswapV3FactorySession struct {
	Contract     *IQuickswapV3Factory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IQuickswapV3FactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IQuickswapV3FactoryCallerSession struct {
	Contract *IQuickswapV3FactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// IQuickswapV3FactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IQuickswapV3FactoryTransactorSession struct {
	Contract     *IQuickswapV3FactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// IQuickswapV3FactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type IQuickswapV3FactoryRaw struct {
	Contract *IQuickswapV3Factory // Generic contract binding to access the raw methods on
}

// IQuickswapV3FactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IQuickswapV3FactoryCallerRaw struct {
	Contract *IQuickswapV3FactoryCaller // Generic read-only contract binding to access the raw methods on
}

// IQuickswapV3FactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IQuickswapV3FactoryTransactorRaw struct {
	Contract *IQuickswapV3FactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIQuickswapV3Factory creates a new instance of IQuickswapV3Factory, bound to a specific deployed contract.
func NewIQuickswapV3Factory(address common.Address, backend bind.ContractBackend) (*IQuickswapV3Factory, error) {
	contract, err := bindIQuickswapV3Factory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IQuickswapV3Factory{IQuickswapV3FactoryCaller: IQuickswapV3FactoryCaller{contract: contract}, IQuickswapV3FactoryTransactor: IQuickswapV3FactoryTransactor{contract: contract}, IQuickswapV3FactoryFilterer: IQuickswapV3FactoryFilterer{contract: contract}}, nil
}

// NewIQuickswapV3FactoryCaller creates a new read-only instance of IQuickswapV3Factory, bound to a specific deployed contract.
func NewIQuickswapV3FactoryCaller(address common.Address, caller bind.ContractCaller) (*IQuickswapV3FactoryCaller, error) {
	contract, err := bindIQuickswapV3Factory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IQuickswapV3FactoryCaller{contract: contract}, nil
}

// NewIQuickswapV3FactoryTransactor creates a new write-only instance of IQuickswapV3Factory, bound to a specific deployed contract.
func NewIQuickswapV3FactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*IQuickswapV3FactoryTransactor, error) {
	contract, err := bindIQuickswapV3Factory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IQuickswapV3FactoryTransactor{contract: contract}, nil
}

// NewIQuickswapV3FactoryFilterer creates a new log filterer instance of IQuickswapV3Factory, bound to a specific deployed contract.
func NewIQuickswapV3FactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*IQuickswapV3FactoryFilterer, error) {
	contract, err := bindIQuickswapV3Factory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IQuickswapV3FactoryFilterer{contract: contract}, nil
}

// bindIQuickswapV3Factory binds a generic wrapper to an already deployed contract.
func bindIQuickswapV3Factory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IQuickswapV3FactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IQuickswapV3Factory *IQuickswapV3FactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IQuickswapV3Factory.Contract.IQuickswapV3FactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IQuickswapV3Factory *IQuickswapV3FactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.IQuickswapV3FactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IQuickswapV3Factory *IQuickswapV3FactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.IQuickswapV3FactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IQuickswapV3Factory *IQuickswapV3FactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IQuickswapV3Factory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.contract.Transact(opts, method, params...)
}

// BaseFeeConfiguration is a free data retrieval call binding the contract method 0x9832853a.
//
// Solidity: function baseFeeConfiguration() view returns(uint16 alpha1, uint16 alpha2, uint32 beta1, uint32 beta2, uint16 gamma1, uint16 gamma2, uint32 volumeBeta, uint16 volumeGamma, uint16 baseFee)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCaller) BaseFeeConfiguration(opts *bind.CallOpts) (struct {
	Alpha1      uint16
	Alpha2      uint16
	Beta1       uint32
	Beta2       uint32
	Gamma1      uint16
	Gamma2      uint16
	VolumeBeta  uint32
	VolumeGamma uint16
	BaseFee     uint16
}, error) {
	var out []interface{}
	err := _IQuickswapV3Factory.contract.Call(opts, &out, "baseFeeConfiguration")

	outstruct := new(struct {
		Alpha1      uint16
		Alpha2      uint16
		Beta1       uint32
		Beta2       uint32
		Gamma1      uint16
		Gamma2      uint16
		VolumeBeta  uint32
		VolumeGamma uint16
		BaseFee     uint16
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Alpha1 = *abi.ConvertType(out[0], new(uint16)).(*uint16)
	outstruct.Alpha2 = *abi.ConvertType(out[1], new(uint16)).(*uint16)
	outstruct.Beta1 = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.Beta2 = *abi.ConvertType(out[3], new(uint32)).(*uint32)
	outstruct.Gamma1 = *abi.ConvertType(out[4], new(uint16)).(*uint16)
	outstruct.Gamma2 = *abi.ConvertType(out[5], new(uint16)).(*uint16)
	outstruct.VolumeBeta = *abi.ConvertType(out[6], new(uint32)).(*uint32)
	outstruct.VolumeGamma = *abi.ConvertType(out[7], new(uint16)).(*uint16)
	outstruct.BaseFee = *abi.ConvertType(out[8], new(uint16)).(*uint16)

	return *outstruct, err

}

// BaseFeeConfiguration is a free data retrieval call binding the contract method 0x9832853a.
//
// Solidity: function baseFeeConfiguration() view returns(uint16 alpha1, uint16 alpha2, uint32 beta1, uint32 beta2, uint16 gamma1, uint16 gamma2, uint32 volumeBeta, uint16 volumeGamma, uint16 baseFee)
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) BaseFeeConfiguration() (struct {
	Alpha1      uint16
	Alpha2      uint16
	Beta1       uint32
	Beta2       uint32
	Gamma1      uint16
	Gamma2      uint16
	VolumeBeta  uint32
	VolumeGamma uint16
	BaseFee     uint16
}, error) {
	return _IQuickswapV3Factory.Contract.BaseFeeConfiguration(&_IQuickswapV3Factory.CallOpts)
}

// BaseFeeConfiguration is a free data retrieval call binding the contract method 0x9832853a.
//
// Solidity: function baseFeeConfiguration() view returns(uint16 alpha1, uint16 alpha2, uint32 beta1, uint32 beta2, uint16 gamma1, uint16 gamma2, uint32 volumeBeta, uint16 volumeGamma, uint16 baseFee)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCallerSession) BaseFeeConfiguration() (struct {
	Alpha1      uint16
	Alpha2      uint16
	Beta1       uint32
	Beta2       uint32
	Gamma1      uint16
	Gamma2      uint16
	VolumeBeta  uint32
	VolumeGamma uint16
	BaseFee     uint16
}, error) {
	return _IQuickswapV3Factory.Contract.BaseFeeConfiguration(&_IQuickswapV3Factory.CallOpts)
}

// FarmingAddress is a free data retrieval call binding the contract method 0x8a2ade58.
//
// Solidity: function farmingAddress() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCaller) FarmingAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IQuickswapV3Factory.contract.Call(opts, &out, "farmingAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FarmingAddress is a free data retrieval call binding the contract method 0x8a2ade58.
//
// Solidity: function farmingAddress() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) FarmingAddress() (common.Address, error) {
	return _IQuickswapV3Factory.Contract.FarmingAddress(&_IQuickswapV3Factory.CallOpts)
}

// FarmingAddress is a free data retrieval call binding the contract method 0x8a2ade58.
//
// Solidity: function farmingAddress() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCallerSession) FarmingAddress() (common.Address, error) {
	return _IQuickswapV3Factory.Contract.FarmingAddress(&_IQuickswapV3Factory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IQuickswapV3Factory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) Owner() (common.Address, error) {
	return _IQuickswapV3Factory.Contract.Owner(&_IQuickswapV3Factory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCallerSession) Owner() (common.Address, error) {
	return _IQuickswapV3Factory.Contract.Owner(&_IQuickswapV3Factory.CallOpts)
}

// PoolByPair is a free data retrieval call binding the contract method 0xd9a641e1.
//
// Solidity: function poolByPair(address , address ) view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCaller) PoolByPair(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (common.Address, error) {
	var out []interface{}
	err := _IQuickswapV3Factory.contract.Call(opts, &out, "poolByPair", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PoolByPair is a free data retrieval call binding the contract method 0xd9a641e1.
//
// Solidity: function poolByPair(address , address ) view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) PoolByPair(arg0 common.Address, arg1 common.Address) (common.Address, error) {
	return _IQuickswapV3Factory.Contract.PoolByPair(&_IQuickswapV3Factory.CallOpts, arg0, arg1)
}

// PoolByPair is a free data retrieval call binding the contract method 0xd9a641e1.
//
// Solidity: function poolByPair(address , address ) view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCallerSession) PoolByPair(arg0 common.Address, arg1 common.Address) (common.Address, error) {
	return _IQuickswapV3Factory.Contract.PoolByPair(&_IQuickswapV3Factory.CallOpts, arg0, arg1)
}

// PoolDeployer is a free data retrieval call binding the contract method 0x3119049a.
//
// Solidity: function poolDeployer() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCaller) PoolDeployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IQuickswapV3Factory.contract.Call(opts, &out, "poolDeployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PoolDeployer is a free data retrieval call binding the contract method 0x3119049a.
//
// Solidity: function poolDeployer() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) PoolDeployer() (common.Address, error) {
	return _IQuickswapV3Factory.Contract.PoolDeployer(&_IQuickswapV3Factory.CallOpts)
}

// PoolDeployer is a free data retrieval call binding the contract method 0x3119049a.
//
// Solidity: function poolDeployer() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCallerSession) PoolDeployer() (common.Address, error) {
	return _IQuickswapV3Factory.Contract.PoolDeployer(&_IQuickswapV3Factory.CallOpts)
}

// VaultAddress is a free data retrieval call binding the contract method 0x430bf08a.
//
// Solidity: function vaultAddress() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCaller) VaultAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IQuickswapV3Factory.contract.Call(opts, &out, "vaultAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VaultAddress is a free data retrieval call binding the contract method 0x430bf08a.
//
// Solidity: function vaultAddress() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) VaultAddress() (common.Address, error) {
	return _IQuickswapV3Factory.Contract.VaultAddress(&_IQuickswapV3Factory.CallOpts)
}

// VaultAddress is a free data retrieval call binding the contract method 0x430bf08a.
//
// Solidity: function vaultAddress() view returns(address)
func (_IQuickswapV3Factory *IQuickswapV3FactoryCallerSession) VaultAddress() (common.Address, error) {
	return _IQuickswapV3Factory.Contract.VaultAddress(&_IQuickswapV3Factory.CallOpts)
}

// CreatePool is a paid mutator transaction binding the contract method 0xe3433615.
//
// Solidity: function createPool(address tokenA, address tokenB) returns(address pool)
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactor) CreatePool(opts *bind.TransactOpts, tokenA common.Address, tokenB common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.contract.Transact(opts, "createPool", tokenA, tokenB)
}

// CreatePool is a paid mutator transaction binding the contract method 0xe3433615.
//
// Solidity: function createPool(address tokenA, address tokenB) returns(address pool)
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) CreatePool(tokenA common.Address, tokenB common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.CreatePool(&_IQuickswapV3Factory.TransactOpts, tokenA, tokenB)
}

// CreatePool is a paid mutator transaction binding the contract method 0xe3433615.
//
// Solidity: function createPool(address tokenA, address tokenB) returns(address pool)
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactorSession) CreatePool(tokenA common.Address, tokenB common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.CreatePool(&_IQuickswapV3Factory.TransactOpts, tokenA, tokenB)
}

// SetBaseFeeConfiguration is a paid mutator transaction binding the contract method 0x5d6d7e93.
//
// Solidity: function setBaseFeeConfiguration(uint16 alpha1, uint16 alpha2, uint32 beta1, uint32 beta2, uint16 gamma1, uint16 gamma2, uint32 volumeBeta, uint16 volumeGamma, uint16 baseFee) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactor) SetBaseFeeConfiguration(opts *bind.TransactOpts, alpha1 uint16, alpha2 uint16, beta1 uint32, beta2 uint32, gamma1 uint16, gamma2 uint16, volumeBeta uint32, volumeGamma uint16, baseFee uint16) (*types.Transaction, error) {
	return _IQuickswapV3Factory.contract.Transact(opts, "setBaseFeeConfiguration", alpha1, alpha2, beta1, beta2, gamma1, gamma2, volumeBeta, volumeGamma, baseFee)
}

// SetBaseFeeConfiguration is a paid mutator transaction binding the contract method 0x5d6d7e93.
//
// Solidity: function setBaseFeeConfiguration(uint16 alpha1, uint16 alpha2, uint32 beta1, uint32 beta2, uint16 gamma1, uint16 gamma2, uint32 volumeBeta, uint16 volumeGamma, uint16 baseFee) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) SetBaseFeeConfiguration(alpha1 uint16, alpha2 uint16, beta1 uint32, beta2 uint32, gamma1 uint16, gamma2 uint16, volumeBeta uint32, volumeGamma uint16, baseFee uint16) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.SetBaseFeeConfiguration(&_IQuickswapV3Factory.TransactOpts, alpha1, alpha2, beta1, beta2, gamma1, gamma2, volumeBeta, volumeGamma, baseFee)
}

// SetBaseFeeConfiguration is a paid mutator transaction binding the contract method 0x5d6d7e93.
//
// Solidity: function setBaseFeeConfiguration(uint16 alpha1, uint16 alpha2, uint32 beta1, uint32 beta2, uint16 gamma1, uint16 gamma2, uint32 volumeBeta, uint16 volumeGamma, uint16 baseFee) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactorSession) SetBaseFeeConfiguration(alpha1 uint16, alpha2 uint16, beta1 uint32, beta2 uint32, gamma1 uint16, gamma2 uint16, volumeBeta uint32, volumeGamma uint16, baseFee uint16) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.SetBaseFeeConfiguration(&_IQuickswapV3Factory.TransactOpts, alpha1, alpha2, beta1, beta2, gamma1, gamma2, volumeBeta, volumeGamma, baseFee)
}

// SetFarmingAddress is a paid mutator transaction binding the contract method 0xb001f618.
//
// Solidity: function setFarmingAddress(address _farmingAddress) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactor) SetFarmingAddress(opts *bind.TransactOpts, _farmingAddress common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.contract.Transact(opts, "setFarmingAddress", _farmingAddress)
}

// SetFarmingAddress is a paid mutator transaction binding the contract method 0xb001f618.
//
// Solidity: function setFarmingAddress(address _farmingAddress) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) SetFarmingAddress(_farmingAddress common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.SetFarmingAddress(&_IQuickswapV3Factory.TransactOpts, _farmingAddress)
}

// SetFarmingAddress is a paid mutator transaction binding the contract method 0xb001f618.
//
// Solidity: function setFarmingAddress(address _farmingAddress) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactorSession) SetFarmingAddress(_farmingAddress common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.SetFarmingAddress(&_IQuickswapV3Factory.TransactOpts, _farmingAddress)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address _owner) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactor) SetOwner(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.contract.Transact(opts, "setOwner", _owner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address _owner) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) SetOwner(_owner common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.SetOwner(&_IQuickswapV3Factory.TransactOpts, _owner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address _owner) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactorSession) SetOwner(_owner common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.SetOwner(&_IQuickswapV3Factory.TransactOpts, _owner)
}

// SetVaultAddress is a paid mutator transaction binding the contract method 0x85535cc5.
//
// Solidity: function setVaultAddress(address _vaultAddress) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactor) SetVaultAddress(opts *bind.TransactOpts, _vaultAddress common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.contract.Transact(opts, "setVaultAddress", _vaultAddress)
}

// SetVaultAddress is a paid mutator transaction binding the contract method 0x85535cc5.
//
// Solidity: function setVaultAddress(address _vaultAddress) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactorySession) SetVaultAddress(_vaultAddress common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.SetVaultAddress(&_IQuickswapV3Factory.TransactOpts, _vaultAddress)
}

// SetVaultAddress is a paid mutator transaction binding the contract method 0x85535cc5.
//
// Solidity: function setVaultAddress(address _vaultAddress) returns()
func (_IQuickswapV3Factory *IQuickswapV3FactoryTransactorSession) SetVaultAddress(_vaultAddress common.Address) (*types.Transaction, error) {
	return _IQuickswapV3Factory.Contract.SetVaultAddress(&_IQuickswapV3Factory.TransactOpts, _vaultAddress)
}

// IQuickswapV3FactoryFarmingAddressIterator is returned from FilterFarmingAddress and is used to iterate over the raw logs and unpacked data for FarmingAddress events raised by the IQuickswapV3Factory contract.
type IQuickswapV3FactoryFarmingAddressIterator struct {
	Event *IQuickswapV3FactoryFarmingAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IQuickswapV3FactoryFarmingAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IQuickswapV3FactoryFarmingAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IQuickswapV3FactoryFarmingAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IQuickswapV3FactoryFarmingAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IQuickswapV3FactoryFarmingAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IQuickswapV3FactoryFarmingAddress represents a FarmingAddress event raised by the IQuickswapV3Factory contract.
type IQuickswapV3FactoryFarmingAddress struct {
	NewFarmingAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterFarmingAddress is a free log retrieval operation binding the contract event 0x56b9e8342f530796ceed0d5529abdcdeae6e4f2ac1dc456ceb73bbda898e0cd3.
//
// Solidity: event FarmingAddress(address indexed newFarmingAddress)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) FilterFarmingAddress(opts *bind.FilterOpts, newFarmingAddress []common.Address) (*IQuickswapV3FactoryFarmingAddressIterator, error) {

	var newFarmingAddressRule []interface{}
	for _, newFarmingAddressItem := range newFarmingAddress {
		newFarmingAddressRule = append(newFarmingAddressRule, newFarmingAddressItem)
	}

	logs, sub, err := _IQuickswapV3Factory.contract.FilterLogs(opts, "FarmingAddress", newFarmingAddressRule)
	if err != nil {
		return nil, err
	}
	return &IQuickswapV3FactoryFarmingAddressIterator{contract: _IQuickswapV3Factory.contract, event: "FarmingAddress", logs: logs, sub: sub}, nil
}

// WatchFarmingAddress is a free log subscription operation binding the contract event 0x56b9e8342f530796ceed0d5529abdcdeae6e4f2ac1dc456ceb73bbda898e0cd3.
//
// Solidity: event FarmingAddress(address indexed newFarmingAddress)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) WatchFarmingAddress(opts *bind.WatchOpts, sink chan<- *IQuickswapV3FactoryFarmingAddress, newFarmingAddress []common.Address) (event.Subscription, error) {

	var newFarmingAddressRule []interface{}
	for _, newFarmingAddressItem := range newFarmingAddress {
		newFarmingAddressRule = append(newFarmingAddressRule, newFarmingAddressItem)
	}

	logs, sub, err := _IQuickswapV3Factory.contract.WatchLogs(opts, "FarmingAddress", newFarmingAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IQuickswapV3FactoryFarmingAddress)
				if err := _IQuickswapV3Factory.contract.UnpackLog(event, "FarmingAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFarmingAddress is a log parse operation binding the contract event 0x56b9e8342f530796ceed0d5529abdcdeae6e4f2ac1dc456ceb73bbda898e0cd3.
//
// Solidity: event FarmingAddress(address indexed newFarmingAddress)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) ParseFarmingAddress(log types.Log) (*IQuickswapV3FactoryFarmingAddress, error) {
	event := new(IQuickswapV3FactoryFarmingAddress)
	if err := _IQuickswapV3Factory.contract.UnpackLog(event, "FarmingAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IQuickswapV3FactoryFeeConfigurationIterator is returned from FilterFeeConfiguration and is used to iterate over the raw logs and unpacked data for FeeConfiguration events raised by the IQuickswapV3Factory contract.
type IQuickswapV3FactoryFeeConfigurationIterator struct {
	Event *IQuickswapV3FactoryFeeConfiguration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IQuickswapV3FactoryFeeConfigurationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IQuickswapV3FactoryFeeConfiguration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IQuickswapV3FactoryFeeConfiguration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IQuickswapV3FactoryFeeConfigurationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IQuickswapV3FactoryFeeConfigurationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IQuickswapV3FactoryFeeConfiguration represents a FeeConfiguration event raised by the IQuickswapV3Factory contract.
type IQuickswapV3FactoryFeeConfiguration struct {
	Alpha1      uint16
	Alpha2      uint16
	Beta1       uint32
	Beta2       uint32
	Gamma1      uint16
	Gamma2      uint16
	VolumeBeta  uint32
	VolumeGamma uint16
	BaseFee     uint16
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterFeeConfiguration is a free log retrieval operation binding the contract event 0x4035ab409f15e202f9f114632e1fb14a0552325955722be18503403e7f98730c.
//
// Solidity: event FeeConfiguration(uint16 alpha1, uint16 alpha2, uint32 beta1, uint32 beta2, uint16 gamma1, uint16 gamma2, uint32 volumeBeta, uint16 volumeGamma, uint16 baseFee)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) FilterFeeConfiguration(opts *bind.FilterOpts) (*IQuickswapV3FactoryFeeConfigurationIterator, error) {

	logs, sub, err := _IQuickswapV3Factory.contract.FilterLogs(opts, "FeeConfiguration")
	if err != nil {
		return nil, err
	}
	return &IQuickswapV3FactoryFeeConfigurationIterator{contract: _IQuickswapV3Factory.contract, event: "FeeConfiguration", logs: logs, sub: sub}, nil
}

// WatchFeeConfiguration is a free log subscription operation binding the contract event 0x4035ab409f15e202f9f114632e1fb14a0552325955722be18503403e7f98730c.
//
// Solidity: event FeeConfiguration(uint16 alpha1, uint16 alpha2, uint32 beta1, uint32 beta2, uint16 gamma1, uint16 gamma2, uint32 volumeBeta, uint16 volumeGamma, uint16 baseFee)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) WatchFeeConfiguration(opts *bind.WatchOpts, sink chan<- *IQuickswapV3FactoryFeeConfiguration) (event.Subscription, error) {

	logs, sub, err := _IQuickswapV3Factory.contract.WatchLogs(opts, "FeeConfiguration")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IQuickswapV3FactoryFeeConfiguration)
				if err := _IQuickswapV3Factory.contract.UnpackLog(event, "FeeConfiguration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeConfiguration is a log parse operation binding the contract event 0x4035ab409f15e202f9f114632e1fb14a0552325955722be18503403e7f98730c.
//
// Solidity: event FeeConfiguration(uint16 alpha1, uint16 alpha2, uint32 beta1, uint32 beta2, uint16 gamma1, uint16 gamma2, uint32 volumeBeta, uint16 volumeGamma, uint16 baseFee)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) ParseFeeConfiguration(log types.Log) (*IQuickswapV3FactoryFeeConfiguration, error) {
	event := new(IQuickswapV3FactoryFeeConfiguration)
	if err := _IQuickswapV3Factory.contract.UnpackLog(event, "FeeConfiguration", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IQuickswapV3FactoryOwnerIterator is returned from FilterOwner and is used to iterate over the raw logs and unpacked data for Owner events raised by the IQuickswapV3Factory contract.
type IQuickswapV3FactoryOwnerIterator struct {
	Event *IQuickswapV3FactoryOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IQuickswapV3FactoryOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IQuickswapV3FactoryOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IQuickswapV3FactoryOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IQuickswapV3FactoryOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IQuickswapV3FactoryOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IQuickswapV3FactoryOwner represents a Owner event raised by the IQuickswapV3Factory contract.
type IQuickswapV3FactoryOwner struct {
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOwner is a free log retrieval operation binding the contract event 0xa5e220c2c27d986cc8efeafa8f34ba6ea6bf96a34e146b29b6bdd8587771b130.
//
// Solidity: event Owner(address indexed newOwner)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) FilterOwner(opts *bind.FilterOpts, newOwner []common.Address) (*IQuickswapV3FactoryOwnerIterator, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IQuickswapV3Factory.contract.FilterLogs(opts, "Owner", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IQuickswapV3FactoryOwnerIterator{contract: _IQuickswapV3Factory.contract, event: "Owner", logs: logs, sub: sub}, nil
}

// WatchOwner is a free log subscription operation binding the contract event 0xa5e220c2c27d986cc8efeafa8f34ba6ea6bf96a34e146b29b6bdd8587771b130.
//
// Solidity: event Owner(address indexed newOwner)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) WatchOwner(opts *bind.WatchOpts, sink chan<- *IQuickswapV3FactoryOwner, newOwner []common.Address) (event.Subscription, error) {

	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IQuickswapV3Factory.contract.WatchLogs(opts, "Owner", newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IQuickswapV3FactoryOwner)
				if err := _IQuickswapV3Factory.contract.UnpackLog(event, "Owner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwner is a log parse operation binding the contract event 0xa5e220c2c27d986cc8efeafa8f34ba6ea6bf96a34e146b29b6bdd8587771b130.
//
// Solidity: event Owner(address indexed newOwner)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) ParseOwner(log types.Log) (*IQuickswapV3FactoryOwner, error) {
	event := new(IQuickswapV3FactoryOwner)
	if err := _IQuickswapV3Factory.contract.UnpackLog(event, "Owner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IQuickswapV3FactoryPoolIterator is returned from FilterPool and is used to iterate over the raw logs and unpacked data for Pool events raised by the IQuickswapV3Factory contract.
type IQuickswapV3FactoryPoolIterator struct {
	Event *IQuickswapV3FactoryPool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IQuickswapV3FactoryPoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IQuickswapV3FactoryPool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IQuickswapV3FactoryPool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IQuickswapV3FactoryPoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IQuickswapV3FactoryPoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IQuickswapV3FactoryPool represents a Pool event raised by the IQuickswapV3Factory contract.
type IQuickswapV3FactoryPool struct {
	Token0 common.Address
	Token1 common.Address
	Pool   common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPool is a free log retrieval operation binding the contract event 0x91ccaa7a278130b65168c3a0c8d3bcae84cf5e43704342bd3ec0b59e59c036db.
//
// Solidity: event Pool(address indexed token0, address indexed token1, address pool)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) FilterPool(opts *bind.FilterOpts, token0 []common.Address, token1 []common.Address) (*IQuickswapV3FactoryPoolIterator, error) {

	var token0Rule []interface{}
	for _, token0Item := range token0 {
		token0Rule = append(token0Rule, token0Item)
	}
	var token1Rule []interface{}
	for _, token1Item := range token1 {
		token1Rule = append(token1Rule, token1Item)
	}

	logs, sub, err := _IQuickswapV3Factory.contract.FilterLogs(opts, "Pool", token0Rule, token1Rule)
	if err != nil {
		return nil, err
	}
	return &IQuickswapV3FactoryPoolIterator{contract: _IQuickswapV3Factory.contract, event: "Pool", logs: logs, sub: sub}, nil
}

// WatchPool is a free log subscription operation binding the contract event 0x91ccaa7a278130b65168c3a0c8d3bcae84cf5e43704342bd3ec0b59e59c036db.
//
// Solidity: event Pool(address indexed token0, address indexed token1, address pool)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) WatchPool(opts *bind.WatchOpts, sink chan<- *IQuickswapV3FactoryPool, token0 []common.Address, token1 []common.Address) (event.Subscription, error) {

	var token0Rule []interface{}
	for _, token0Item := range token0 {
		token0Rule = append(token0Rule, token0Item)
	}
	var token1Rule []interface{}
	for _, token1Item := range token1 {
		token1Rule = append(token1Rule, token1Item)
	}

	logs, sub, err := _IQuickswapV3Factory.contract.WatchLogs(opts, "Pool", token0Rule, token1Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IQuickswapV3FactoryPool)
				if err := _IQuickswapV3Factory.contract.UnpackLog(event, "Pool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePool is a log parse operation binding the contract event 0x91ccaa7a278130b65168c3a0c8d3bcae84cf5e43704342bd3ec0b59e59c036db.
//
// Solidity: event Pool(address indexed token0, address indexed token1, address pool)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) ParsePool(log types.Log) (*IQuickswapV3FactoryPool, error) {
	event := new(IQuickswapV3FactoryPool)
	if err := _IQuickswapV3Factory.contract.UnpackLog(event, "Pool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IQuickswapV3FactoryVaultAddressIterator is returned from FilterVaultAddress and is used to iterate over the raw logs and unpacked data for VaultAddress events raised by the IQuickswapV3Factory contract.
type IQuickswapV3FactoryVaultAddressIterator struct {
	Event *IQuickswapV3FactoryVaultAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IQuickswapV3FactoryVaultAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IQuickswapV3FactoryVaultAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IQuickswapV3FactoryVaultAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IQuickswapV3FactoryVaultAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IQuickswapV3FactoryVaultAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IQuickswapV3FactoryVaultAddress represents a VaultAddress event raised by the IQuickswapV3Factory contract.
type IQuickswapV3FactoryVaultAddress struct {
	NewVaultAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterVaultAddress is a free log retrieval operation binding the contract event 0xb9c265ae4414f501736ec5d4961edc3309e4385eb2ff3feeecb30fb36621dd83.
//
// Solidity: event VaultAddress(address indexed newVaultAddress)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) FilterVaultAddress(opts *bind.FilterOpts, newVaultAddress []common.Address) (*IQuickswapV3FactoryVaultAddressIterator, error) {

	var newVaultAddressRule []interface{}
	for _, newVaultAddressItem := range newVaultAddress {
		newVaultAddressRule = append(newVaultAddressRule, newVaultAddressItem)
	}

	logs, sub, err := _IQuickswapV3Factory.contract.FilterLogs(opts, "VaultAddress", newVaultAddressRule)
	if err != nil {
		return nil, err
	}
	return &IQuickswapV3FactoryVaultAddressIterator{contract: _IQuickswapV3Factory.contract, event: "VaultAddress", logs: logs, sub: sub}, nil
}

// WatchVaultAddress is a free log subscription operation binding the contract event 0xb9c265ae4414f501736ec5d4961edc3309e4385eb2ff3feeecb30fb36621dd83.
//
// Solidity: event VaultAddress(address indexed newVaultAddress)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) WatchVaultAddress(opts *bind.WatchOpts, sink chan<- *IQuickswapV3FactoryVaultAddress, newVaultAddress []common.Address) (event.Subscription, error) {

	var newVaultAddressRule []interface{}
	for _, newVaultAddressItem := range newVaultAddress {
		newVaultAddressRule = append(newVaultAddressRule, newVaultAddressItem)
	}

	logs, sub, err := _IQuickswapV3Factory.contract.WatchLogs(opts, "VaultAddress", newVaultAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IQuickswapV3FactoryVaultAddress)
				if err := _IQuickswapV3Factory.contract.UnpackLog(event, "VaultAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVaultAddress is a log parse operation binding the contract event 0xb9c265ae4414f501736ec5d4961edc3309e4385eb2ff3feeecb30fb36621dd83.
//
// Solidity: event VaultAddress(address indexed newVaultAddress)
func (_IQuickswapV3Factory *IQuickswapV3FactoryFilterer) ParseVaultAddress(log types.Log) (*IQuickswapV3FactoryVaultAddress, error) {
	event := new(IQuickswapV3FactoryVaultAddress)
	if err := _IQuickswapV3Factory.contract.UnpackLog(event, "VaultAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
