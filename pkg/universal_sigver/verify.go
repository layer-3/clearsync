package universal_sigver

import (
	"fmt"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

// As in ERC-6492
const validateSigOffchainSuccess = "0x01"
const validateSigOffchainBytecode = "0x608060405234801561001057600080fd5b50604051610fa0380380610fa083398101604081905261002f91610124565b600060405161003d906100dd565b604051809103906000f080158015610059573d6000803e3d6000fd5b5090506000816001600160a01b0316638f0684308686866040518463ffffffff1660e01b815260040161008e939291906101fb565b6020604051808303816000875af11580156100ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d19190610244565b9050806000526001601ff35b610d328061026e83390190565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561011b578181015183820152602001610103565b50506000910152565b60008060006060848603121561013957600080fd5b83516001600160a01b038116811461015057600080fd5b6020850151604086015191945092506001600160401b038082111561017457600080fd5b818601915086601f83011261018857600080fd5b81518181111561019a5761019a6100ea565b604051601f8201601f19908116603f011681019083821181831017156101c2576101c26100ea565b816040528281528960208487010111156101db57600080fd5b6101ec836020830160208801610100565b80955050505050509250925092565b60018060a01b0384168152826020820152606060408201526000825180606084015261022e816080850160208701610100565b601f01601f191691909101608001949350505050565b60006020828403121561025657600080fd5b8151801515811461026657600080fd5b939250505056fe608060405234801561001057600080fd5b50610d12806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806316d43401146100465780638f0684301461006d57806398ef1ed814610080575b600080fd5b61005961005436600461084e565b610093565b604051901515815260200160405180910390f35b61005961007b3660046108c2565b6105eb565b61005961008e3660046108c2565b610681565b600073ffffffffffffffffffffffffffffffffffffffff86163b6060827f649264926492649264926492649264926492649264926492649264926492649287876100de60208261091e565b6100ea928a929061095e565b6100f391610988565b14905080156101f3576000606088828961010e60208261091e565b9261011b9392919061095e565b8101906101289190610a9e565b9550909250905060008590036101ec576000808373ffffffffffffffffffffffffffffffffffffffff16836040516101609190610b38565b6000604051808303816000865af19150503d806000811461019d576040519150601f19603f3d011682016040523d82523d6000602084013e6101a2565b606091505b5091509150816101e957806040517f9d0d6e2d0000000000000000000000000000000000000000000000000000000081526004016101e09190610b9e565b60405180910390fd5b50505b505061022d565b86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294505050505b80806102395750600083115b156103c6576040517f1626ba7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1690631626ba7e90610292908b908690600401610bb8565b602060405180830381865afa9250505080156102e9575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102e691810190610bd1565b60015b610351573d808015610317576040519150601f19603f3d011682016040523d82523d6000602084013e61031c565b606091505b50806040517f6f2a95990000000000000000000000000000000000000000000000000000000081526004016101e09190610b9e565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f1626ba7e0000000000000000000000000000000000000000000000000000000014841580156103a15750825b80156103ab575086155b156103ba57806000526001601ffd5b94506105e29350505050565b60418614610456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f5369676e617475726556616c696461746f72237265636f7665725369676e657260448201527f3a20696e76616c6964207369676e6174757265206c656e67746800000000000060648201526084016101e0565b6000610465602082898b61095e565b61046e91610988565b90506000610480604060208a8c61095e565b61048991610988565b90506000898960408181106104a0576104a0610c13565b919091013560f81c915050601b81148015906104c057508060ff16601c14155b1561054d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f5369676e617475726556616c696461746f723a20696e76616c6964207369676e60448201527f617475726520762076616c75650000000000000000000000000000000000000060648201526084016101e0565b6040805160008152602081018083528d905260ff831691810191909152606081018490526080810183905273ffffffffffffffffffffffffffffffffffffffff8d169060019060a0016020604051602081039080840390855afa1580156105b8573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff161496505050505050505b95945050505050565b6040517f16d4340100000000000000000000000000000000000000000000000000000000815260009030906316d4340190610633908890889088908890600190600401610c42565b6020604051808303816000875af1158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190610cbf565b90505b949350505050565b6040517f16d4340100000000000000000000000000000000000000000000000000000000815260009030906316d43401906106c89088908890889088908890600401610c42565b6020604051808303816000875af1925050508015610721575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261071e91810190610cbf565b60015b6107cb573d80801561074f576040519150601f19603f3d011682016040523d82523d6000602084013e610754565b606091505b50805160018190036107c7578160008151811061077357610773610c13565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f0100000000000000000000000000000000000000000000000000000000000000149250610679915050565b8082fd5b9050610679565b73ffffffffffffffffffffffffffffffffffffffff811681146107f457600080fd5b50565b60008083601f84011261080957600080fd5b50813567ffffffffffffffff81111561082157600080fd5b60208301915083602082850101111561083957600080fd5b9250929050565b80151581146107f457600080fd5b60008060008060006080868803121561086657600080fd5b8535610871816107d2565b945060208601359350604086013567ffffffffffffffff81111561089457600080fd5b6108a0888289016107f7565b90945092505060608601356108b481610840565b809150509295509295909350565b600080600080606085870312156108d857600080fd5b84356108e3816107d2565b935060208501359250604085013567ffffffffffffffff81111561090657600080fd5b610912878288016107f7565b95989497509550505050565b81810381811115610958577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b6000808585111561096e57600080fd5b8386111561097b57600080fd5b5050820193919092039150565b80356020831015610958577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112610a0457600080fd5b813567ffffffffffffffff80821115610a1f57610a1f6109c4565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610a6557610a656109c4565b81604052838152866020858801011115610a7e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610ab357600080fd5b8335610abe816107d2565b9250602084013567ffffffffffffffff80821115610adb57600080fd5b610ae7878388016109f3565b93506040860135915080821115610afd57600080fd5b50610b0a868287016109f3565b9150509250925092565b60005b83811015610b2f578181015183820152602001610b17565b50506000910152565b60008251610b4a818460208701610b14565b9190910192915050565b60008151808452610b6c816020860160208601610b14565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610bb16020830184610b54565b9392505050565b8281526040602082015260006106796040830184610b54565b600060208284031215610be357600080fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114610bb157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8616815284602082015260806040820152826080820152828460a0830137600060a08483010152600060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116830101905082151560608301529695505050505050565b600060208284031215610cd157600080fd5b8151610bb18161084056fea26469706673582212206df6ae6dee3942b6688516a27b66cf8f6f3f84b1c00c0c4bef93aea2786c57d864736f6c63430008160033"

func must[T any](x T, err error) T {
	if err != nil {
		panic(err)
	}
	return x
}

var (
	address = must(abi.NewType("address", "", nil))
	bytes32 = must(abi.NewType("bytes32", "", nil))
	bytes   = must(abi.NewType("bytes", "", nil))
)

func packIsValidSigCall(signer common.Address, messageHash common.Hash, signature []byte) []byte {
	args := abi.Arguments{
		{Name: "signer", Type: address},
		{Name: "hash", Type: bytes32},
		{Name: "signature", Type: bytes},
	}

	packed, err := args.Pack(signer, messageHash, signature)
	if err != nil {
		panic(fmt.Errorf("failed to pack is valid sig call: %w", err))
	}

	validateSigOffchainBytecodeBytes := hexutil.MustDecode(validateSigOffchainBytecode)

	return append(validateSigOffchainBytecodeBytes, packed...)
}
