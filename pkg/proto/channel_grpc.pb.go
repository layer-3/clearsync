// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChannelClient is the client API for Channel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelClient interface {
	Open(ctx context.Context, in *ChannelState, opts ...grpc.CallOption) (*Signature, error)
	Update(ctx context.Context, in *ChannelState, opts ...grpc.CallOption) (*Signature, error)
	Close(ctx context.Context, in *ChannelState, opts ...grpc.CallOption) (*Signature, error)
	SubscribeTrades(ctx context.Context, in *SubscribeTradesRequest, opts ...grpc.CallOption) (Channel_SubscribeTradesClient, error)
}

type channelClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelClient(cc grpc.ClientConnInterface) ChannelClient {
	return &channelClient{cc}
}

func (c *channelClient) Open(ctx context.Context, in *ChannelState, opts ...grpc.CallOption) (*Signature, error) {
	out := new(Signature)
	err := c.cc.Invoke(ctx, "/Channel/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Update(ctx context.Context, in *ChannelState, opts ...grpc.CallOption) (*Signature, error) {
	out := new(Signature)
	err := c.cc.Invoke(ctx, "/Channel/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Close(ctx context.Context, in *ChannelState, opts ...grpc.CallOption) (*Signature, error) {
	out := new(Signature)
	err := c.cc.Invoke(ctx, "/Channel/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) SubscribeTrades(ctx context.Context, in *SubscribeTradesRequest, opts ...grpc.CallOption) (Channel_SubscribeTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Channel_ServiceDesc.Streams[0], "/Channel/SubscribeTrades", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelSubscribeTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Channel_SubscribeTradesClient interface {
	Recv() (*Trade, error)
	grpc.ClientStream
}

type channelSubscribeTradesClient struct {
	grpc.ClientStream
}

func (x *channelSubscribeTradesClient) Recv() (*Trade, error) {
	m := new(Trade)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChannelServer is the server API for Channel service.
// All implementations must embed UnimplementedChannelServer
// for forward compatibility
type ChannelServer interface {
	Open(context.Context, *ChannelState) (*Signature, error)
	Update(context.Context, *ChannelState) (*Signature, error)
	Close(context.Context, *ChannelState) (*Signature, error)
	SubscribeTrades(*SubscribeTradesRequest, Channel_SubscribeTradesServer) error
	mustEmbedUnimplementedChannelServer()
}

// UnimplementedChannelServer must be embedded to have forward compatible implementations.
type UnimplementedChannelServer struct {
}

func (UnimplementedChannelServer) Open(context.Context, *ChannelState) (*Signature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedChannelServer) Update(context.Context, *ChannelState) (*Signature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedChannelServer) Close(context.Context, *ChannelState) (*Signature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedChannelServer) SubscribeTrades(*SubscribeTradesRequest, Channel_SubscribeTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTrades not implemented")
}
func (UnimplementedChannelServer) mustEmbedUnimplementedChannelServer() {}

// UnsafeChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServer will
// result in compilation errors.
type UnsafeChannelServer interface {
	mustEmbedUnimplementedChannelServer()
}

func RegisterChannelServer(s grpc.ServiceRegistrar, srv ChannelServer) {
	s.RegisterService(&Channel_ServiceDesc, srv)
}

func _Channel_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channel/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Open(ctx, req.(*ChannelState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channel/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Update(ctx, req.(*ChannelState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Channel/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Close(ctx, req.(*ChannelState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_SubscribeTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelServer).SubscribeTrades(m, &channelSubscribeTradesServer{stream})
}

type Channel_SubscribeTradesServer interface {
	Send(*Trade) error
	grpc.ServerStream
}

type channelSubscribeTradesServer struct {
	grpc.ServerStream
}

func (x *channelSubscribeTradesServer) Send(m *Trade) error {
	return x.ServerStream.SendMsg(m)
}

// Channel_ServiceDesc is the grpc.ServiceDesc for Channel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Channel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Channel",
	HandlerType: (*ChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _Channel_Open_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Channel_Update_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Channel_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTrades",
			Handler:       _Channel_SubscribeTrades_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "channel.proto",
}
