// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EscrowChannelClient is the client API for EscrowChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EscrowChannelClient interface {
	Prefund(ctx context.Context, in *EscrowState, opts ...grpc.CallOption) (*EscrowState, error)
	Postfund(ctx context.Context, in *EscrowState, opts ...grpc.CallOption) (*EscrowState, error)
	Execute(ctx context.Context, in *EscrowState, opts ...grpc.CallOption) (*EscrowState, error)
	Finalize(ctx context.Context, in *EscrowState, opts ...grpc.CallOption) (*EscrowState, error)
}

type escrowChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewEscrowChannelClient(cc grpc.ClientConnInterface) EscrowChannelClient {
	return &escrowChannelClient{cc}
}

func (c *escrowChannelClient) Prefund(ctx context.Context, in *EscrowState, opts ...grpc.CallOption) (*EscrowState, error) {
	out := new(EscrowState)
	err := c.cc.Invoke(ctx, "/EscrowChannel/Prefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowChannelClient) Postfund(ctx context.Context, in *EscrowState, opts ...grpc.CallOption) (*EscrowState, error) {
	out := new(EscrowState)
	err := c.cc.Invoke(ctx, "/EscrowChannel/Postfund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowChannelClient) Execute(ctx context.Context, in *EscrowState, opts ...grpc.CallOption) (*EscrowState, error) {
	out := new(EscrowState)
	err := c.cc.Invoke(ctx, "/EscrowChannel/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowChannelClient) Finalize(ctx context.Context, in *EscrowState, opts ...grpc.CallOption) (*EscrowState, error) {
	out := new(EscrowState)
	err := c.cc.Invoke(ctx, "/EscrowChannel/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EscrowChannelServer is the server API for EscrowChannel service.
// All implementations must embed UnimplementedEscrowChannelServer
// for forward compatibility
type EscrowChannelServer interface {
	Prefund(context.Context, *EscrowState) (*EscrowState, error)
	Postfund(context.Context, *EscrowState) (*EscrowState, error)
	Execute(context.Context, *EscrowState) (*EscrowState, error)
	Finalize(context.Context, *EscrowState) (*EscrowState, error)
	mustEmbedUnimplementedEscrowChannelServer()
}

// UnimplementedEscrowChannelServer must be embedded to have forward compatible implementations.
type UnimplementedEscrowChannelServer struct {
}

func (UnimplementedEscrowChannelServer) Prefund(context.Context, *EscrowState) (*EscrowState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prefund not implemented")
}
func (UnimplementedEscrowChannelServer) Postfund(context.Context, *EscrowState) (*EscrowState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Postfund not implemented")
}
func (UnimplementedEscrowChannelServer) Execute(context.Context, *EscrowState) (*EscrowState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedEscrowChannelServer) Finalize(context.Context, *EscrowState) (*EscrowState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}
func (UnimplementedEscrowChannelServer) mustEmbedUnimplementedEscrowChannelServer() {}

// UnsafeEscrowChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EscrowChannelServer will
// result in compilation errors.
type UnsafeEscrowChannelServer interface {
	mustEmbedUnimplementedEscrowChannelServer()
}

func RegisterEscrowChannelServer(s grpc.ServiceRegistrar, srv EscrowChannelServer) {
	s.RegisterService(&EscrowChannel_ServiceDesc, srv)
}

func _EscrowChannel_Prefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscrowState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowChannelServer).Prefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EscrowChannel/Prefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowChannelServer).Prefund(ctx, req.(*EscrowState))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowChannel_Postfund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscrowState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowChannelServer).Postfund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EscrowChannel/Postfund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowChannelServer).Postfund(ctx, req.(*EscrowState))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowChannel_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscrowState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowChannelServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EscrowChannel/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowChannelServer).Execute(ctx, req.(*EscrowState))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowChannel_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscrowState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowChannelServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EscrowChannel/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowChannelServer).Finalize(ctx, req.(*EscrowState))
	}
	return interceptor(ctx, in, info, handler)
}

// EscrowChannel_ServiceDesc is the grpc.ServiceDesc for EscrowChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EscrowChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EscrowChannel",
	HandlerType: (*EscrowChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prefund",
			Handler:    _EscrowChannel_Prefund_Handler,
		},
		{
			MethodName: "Postfund",
			Handler:    _EscrowChannel_Postfund_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _EscrowChannel_Execute_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _EscrowChannel_Finalize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "escrow.proto",
}
