// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriceFeedClient is the client API for PriceFeed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceFeedClient interface {
	Subscribe(ctx context.Context, in *PriceFeedSubscribeRequest, opts ...grpc.CallOption) (PriceFeed_SubscribeClient, error)
}

type priceFeedClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceFeedClient(cc grpc.ClientConnInterface) PriceFeedClient {
	return &priceFeedClient{cc}
}

func (c *priceFeedClient) Subscribe(ctx context.Context, in *PriceFeedSubscribeRequest, opts ...grpc.CallOption) (PriceFeed_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PriceFeed_ServiceDesc.Streams[0], "/PriceFeed/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceFeedSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PriceFeed_SubscribeClient interface {
	Recv() (*Quote, error)
	grpc.ClientStream
}

type priceFeedSubscribeClient struct {
	grpc.ClientStream
}

func (x *priceFeedSubscribeClient) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceFeedServer is the server API for PriceFeed service.
// All implementations must embed UnimplementedPriceFeedServer
// for forward compatibility
type PriceFeedServer interface {
	Subscribe(*PriceFeedSubscribeRequest, PriceFeed_SubscribeServer) error
	mustEmbedUnimplementedPriceFeedServer()
}

// UnimplementedPriceFeedServer must be embedded to have forward compatible implementations.
type UnimplementedPriceFeedServer struct {
}

func (UnimplementedPriceFeedServer) Subscribe(*PriceFeedSubscribeRequest, PriceFeed_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPriceFeedServer) mustEmbedUnimplementedPriceFeedServer() {}

// UnsafePriceFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceFeedServer will
// result in compilation errors.
type UnsafePriceFeedServer interface {
	mustEmbedUnimplementedPriceFeedServer()
}

func RegisterPriceFeedServer(s grpc.ServiceRegistrar, srv PriceFeedServer) {
	s.RegisterService(&PriceFeed_ServiceDesc, srv)
}

func _PriceFeed_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PriceFeedSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceFeedServer).Subscribe(m, &priceFeedSubscribeServer{stream})
}

type PriceFeed_SubscribeServer interface {
	Send(*Quote) error
	grpc.ServerStream
}

type priceFeedSubscribeServer struct {
	grpc.ServerStream
}

func (x *priceFeedSubscribeServer) Send(m *Quote) error {
	return x.ServerStream.SendMsg(m)
}

// PriceFeed_ServiceDesc is the grpc.ServiceDesc for PriceFeed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceFeed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PriceFeed",
	HandlerType: (*PriceFeedServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PriceFeed_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "price_feed.proto",
}
