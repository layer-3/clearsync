// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradeChannelClient is the client API for TradeChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeChannelClient interface {
	Prefund(ctx context.Context, in *TradeState, opts ...grpc.CallOption) (*TradeState, error)
	Postfund(ctx context.Context, in *TradeState, opts ...grpc.CallOption) (*TradeState, error)
	UpdateMargin(ctx context.Context, in *SignedMarginCall, opts ...grpc.CallOption) (*SignedMarginCall, error)
	// TODO: Message protocol to be defined
	// Find how to bind with Settlement SVC
	RequestSettlement(ctx context.Context, in *TradeState, opts ...grpc.CallOption) (*TradeState, error)
	Finalize(ctx context.Context, in *TradeState, opts ...grpc.CallOption) (*TradeState, error)
}

type tradeChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeChannelClient(cc grpc.ClientConnInterface) TradeChannelClient {
	return &tradeChannelClient{cc}
}

func (c *tradeChannelClient) Prefund(ctx context.Context, in *TradeState, opts ...grpc.CallOption) (*TradeState, error) {
	out := new(TradeState)
	err := c.cc.Invoke(ctx, "/TradeChannel/Prefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeChannelClient) Postfund(ctx context.Context, in *TradeState, opts ...grpc.CallOption) (*TradeState, error) {
	out := new(TradeState)
	err := c.cc.Invoke(ctx, "/TradeChannel/Postfund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeChannelClient) UpdateMargin(ctx context.Context, in *SignedMarginCall, opts ...grpc.CallOption) (*SignedMarginCall, error) {
	out := new(SignedMarginCall)
	err := c.cc.Invoke(ctx, "/TradeChannel/UpdateMargin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeChannelClient) RequestSettlement(ctx context.Context, in *TradeState, opts ...grpc.CallOption) (*TradeState, error) {
	out := new(TradeState)
	err := c.cc.Invoke(ctx, "/TradeChannel/RequestSettlement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeChannelClient) Finalize(ctx context.Context, in *TradeState, opts ...grpc.CallOption) (*TradeState, error) {
	out := new(TradeState)
	err := c.cc.Invoke(ctx, "/TradeChannel/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeChannelServer is the server API for TradeChannel service.
// All implementations must embed UnimplementedTradeChannelServer
// for forward compatibility
type TradeChannelServer interface {
	Prefund(context.Context, *TradeState) (*TradeState, error)
	Postfund(context.Context, *TradeState) (*TradeState, error)
	UpdateMargin(context.Context, *SignedMarginCall) (*SignedMarginCall, error)
	// TODO: Message protocol to be defined
	// Find how to bind with Settlement SVC
	RequestSettlement(context.Context, *TradeState) (*TradeState, error)
	Finalize(context.Context, *TradeState) (*TradeState, error)
	mustEmbedUnimplementedTradeChannelServer()
}

// UnimplementedTradeChannelServer must be embedded to have forward compatible implementations.
type UnimplementedTradeChannelServer struct {
}

func (UnimplementedTradeChannelServer) Prefund(context.Context, *TradeState) (*TradeState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prefund not implemented")
}
func (UnimplementedTradeChannelServer) Postfund(context.Context, *TradeState) (*TradeState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Postfund not implemented")
}
func (UnimplementedTradeChannelServer) UpdateMargin(context.Context, *SignedMarginCall) (*SignedMarginCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMargin not implemented")
}
func (UnimplementedTradeChannelServer) RequestSettlement(context.Context, *TradeState) (*TradeState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSettlement not implemented")
}
func (UnimplementedTradeChannelServer) Finalize(context.Context, *TradeState) (*TradeState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}
func (UnimplementedTradeChannelServer) mustEmbedUnimplementedTradeChannelServer() {}

// UnsafeTradeChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeChannelServer will
// result in compilation errors.
type UnsafeTradeChannelServer interface {
	mustEmbedUnimplementedTradeChannelServer()
}

func RegisterTradeChannelServer(s grpc.ServiceRegistrar, srv TradeChannelServer) {
	s.RegisterService(&TradeChannel_ServiceDesc, srv)
}

func _TradeChannel_Prefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeChannelServer).Prefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TradeChannel/Prefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeChannelServer).Prefund(ctx, req.(*TradeState))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeChannel_Postfund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeChannelServer).Postfund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TradeChannel/Postfund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeChannelServer).Postfund(ctx, req.(*TradeState))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeChannel_UpdateMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedMarginCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeChannelServer).UpdateMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TradeChannel/UpdateMargin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeChannelServer).UpdateMargin(ctx, req.(*SignedMarginCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeChannel_RequestSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeChannelServer).RequestSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TradeChannel/RequestSettlement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeChannelServer).RequestSettlement(ctx, req.(*TradeState))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeChannel_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeChannelServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TradeChannel/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeChannelServer).Finalize(ctx, req.(*TradeState))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeChannel_ServiceDesc is the grpc.ServiceDesc for TradeChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TradeChannel",
	HandlerType: (*TradeChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prefund",
			Handler:    _TradeChannel_Prefund_Handler,
		},
		{
			MethodName: "Postfund",
			Handler:    _TradeChannel_Postfund_Handler,
		},
		{
			MethodName: "UpdateMargin",
			Handler:    _TradeChannel_UpdateMargin_Handler,
		},
		{
			MethodName: "RequestSettlement",
			Handler:    _TradeChannel_RequestSettlement_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _TradeChannel_Finalize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trade.proto",
}
