package session_key

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	mt "github.com/layer-3/go-merkletree"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/layer-3/clearsync/pkg/abi/itoken"
	"github.com/layer-3/clearsync/pkg/signer"
)

func TestPackValidatorEnableSignature(t *testing.T) {
	tcs := []struct {
		enableData []byte
		validator  common.Address
		executor   common.Address
		digestSig  signer.Signature
		signature  string
	}{
		{
			enableData: hexutil.MustDecode("0x4c3c9c9fe28ea197cc260491393b8f6ed48e732f8d5b5624af55afe4c927b5139d4dbb8e72b8e4ad844f8a20745a4700a7533edf0000000000b100000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"),
			validator:  common.HexToAddress("0xa0Cb889707d426A7A386870A03bc70d1b0697598"),
			executor:   common.HexToAddress("0x"),
			digestSig: signer.NewSignature(
				hexutil.MustDecode("0x4f97dbee2b889485ba79f36485d78e4c748126cb85463f8c3853bea3a7fdaea5"),
				hexutil.MustDecode("0x5aef7802bfd4150e7d833707637fd330c6af17ab5f250966f36e5c30a2524d9b"),
				27,
			),
			signature: "0x00000002000000000000000000000000a0cb889707d426a7a386870a03bc70d1b0697598000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000744c3c9c9fe28ea197cc260491393b8f6ed48e732f8d5b5624af55afe4c927b5139d4dbb8e72b8e4ad844f8a20745a4700a7533edf0000000000b10000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000414f97dbee2b889485ba79f36485d78e4c748126cb85463f8c3853bea3a7fdaea55aef7802bfd4150e7d833707637fd330c6af17ab5f250966f36e5c30a2524d9b1b",
		},
	}

	for _, tc := range tcs {
		signature := PackEnableValidatorSignature(
			tc.enableData,
			tc.validator,
			tc.executor,
			tc.digestSig,
		)

		assert.Equal(t, tc.signature, hexutil.Encode(signature))
	}
}

func TestPackSessionKeySignatureWithSinglePermission(t *testing.T) {
	erc20ABI, err := itoken.IERC20MetaData.GetAbi()
	require.NoError(t, err)

	funcABI := erc20ABI.Methods["approve"]

	tcs := []struct {
		sessionKey          common.Address
		userOpHashSignature []byte
		permissions         []Permission
		proofs              []mt.Proof
		sessionKeySignature string
		expectedErrMsg      string
	}{
		{
			sessionKey:          common.HexToAddress("0x4C3C9C9fE28eA197cC260491393B8f6ED48e732f"),
			userOpHashSignature: hexutil.MustDecode("0xa94589e23d24bea387808cd760b087d62447586c96097682b1eedc2faeffc5981a328c07675b4880e0a79be81a423212cddc6141f9aeba18033026555e17c59a1b"),
			permissions: []Permission{
				{
					Target:      common.HexToAddress("0x03A6a84cD762D9707A21605b548aaaB891562aAb"),
					FunctionABI: funcABI,
					ValueLimit:  big.NewInt(0),
					Rules: []ParamRule{
						{
							Condition: EqualParamCondition,
							Param:     [32]byte(hexutil.MustDecode("0x000000000000000000000000D6BbDE9174b1CdAa358d2Cf4D57D1a9F7178FBfF")[:32]),
						},
						{
							Condition: GreaterThanParamCondition,
							Param:     [32]byte(hexutil.MustDecode("0x0000000000000000000000000000000000000000000000000000000000000064")[:32]),
						},
					},
				},
			},
			proofs: []mt.Proof{
				{
					Siblings: [][]byte{
						hexutil.MustDecode("0x3e1b0fd674a588568c3ca9ffcafc2fd125cc6e2b6b2b133977c02047d262b690"),
						hexutil.MustDecode("0x3001620487f821a0b18b4a3db22bea23f12abf535fac8e90064127ff10b9dbbc"),
					},
				},
			},
			sessionKeySignature: "0x4c3c9c9fe28ea197cc260491393b8f6ed48e732fa94589e23d24bea387808cd760b087d62447586c96097682b1eedc2faeffc5981a328c07675b4880e0a79be81a423212cddc6141f9aeba18033026555e17c59a1b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a6a84cd762d9707a21605b548aaab891562aab095ea7bd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000023e1b0fd674a588568c3ca9ffcafc2fd125cc6e2b6b2b133977c02047d262b6903001620487f821a0b18b4a3db22bea23f12abf535fac8e90064127ff10b9dbbc",
		},
	}

	for _, tc := range tcs {
		userOpHashSig := signer.NewSignature(
			hexutil.MustDecode("0xa94589e23d24bea387808cd760b087d62447586c96097682b1eedc2faeffc598"),
			hexutil.MustDecode("0x1a328c07675b4880e0a79be81a423212cddc6141f9aeba18033026555e17c59a"),
			27,
		)

		kernelPermissions := make([]kernelPermission, len(tc.permissions))
		for i, p := range tc.permissions {
			kernelPermissions[i] = p.toKernelPermission(uint32(i))
		}

		sessionKeySignature, err := PackUseSessionKeySignature(
			tc.sessionKey,
			userOpHashSig,
			kernelPermissions,
			tc.proofs,
		)

		if tc.expectedErrMsg != "" {
			assert.EqualError(t, err, tc.expectedErrMsg)
		} else {
			assert.NoError(t, err)
			assert.Equal(t, tc.sessionKeySignature, hexutil.Encode(sessionKeySignature))
		}
	}
}
