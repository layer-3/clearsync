package session_key

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	mt "github.com/layer-3/go-merkletree"
	"github.com/stretchr/testify/assert"

	"github.com/layer-3/clearsync/pkg/signer"
)

func TestPackValidatorEnableSignature(t *testing.T) {
	tcs := []struct {
		enableData []byte
		validator  common.Address
		executor   common.Address
		digestSig  signer.Signature
		signature  string
	}{
		{
			enableData: hexutil.MustDecode("0x4c3c9c9fe28ea197cc260491393b8f6ed48e732f8d5b5624af55afe4c927b5139d4dbb8e72b8e4ad844f8a20745a4700a7533edf0000000000b100000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"),
			validator:  common.HexToAddress("0xa0Cb889707d426A7A386870A03bc70d1b0697598"),
			executor:   common.HexToAddress("0x"),
			digestSig: signer.NewSignature(
				hexutil.MustDecode("0x4f97dbee2b889485ba79f36485d78e4c748126cb85463f8c3853bea3a7fdaea5"),
				hexutil.MustDecode("0x5aef7802bfd4150e7d833707637fd330c6af17ab5f250966f36e5c30a2524d9b"),
				27,
			),
			signature: "0x000000020000000000b1000000000000a0cb889707d426a7a386870a03bc70d1b0697598000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000744c3c9c9fe28ea197cc260491393b8f6ed48e732f8d5b5624af55afe4c927b5139d4dbb8e72b8e4ad844f8a20745a4700a7533edf0000000000b10000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000414f97dbee2b889485ba79f36485d78e4c748126cb85463f8c3853bea3a7fdaea55aef7802bfd4150e7d833707637fd330c6af17ab5f250966f36e5c30a2524d9b1b",
		},
	}

	for _, tc := range tcs {
		signature := PackValidatorEnableSignature(
			tc.enableData,
			tc.validator,
			tc.executor,
			tc.digestSig,
		)

		assert.Equal(t, tc.signature, hexutil.Encode(signature))
	}
}

func TestPackSessionKeySignatureWithSinglePermission(t *testing.T) {
	tcs := []struct {
		sessionKey     common.Address
		userOpHash     []byte
		permission     Permission
		proof          mt.Proof
		signature      string
		expectedErrMsg string
	}{
		{
			sessionKey: common.HexToAddress("0x4C3C9C9fE28eA197cC260491393B8f6ED48e732f"),
			userOpHash: hexutil.MustDecode("0xa94589e23d24bea387808cd760b087d62447586c96097682b1eedc2faeffc5981a328c07675b4880e0a79be81a423212cddc6141f9aeba18033026555e17c59a1b"),
			permission: Permission{
				Index:      0,
				Target:     common.HexToAddress("0x03A6a84cD762D9707A21605b548aaaB891562aAb"),
				Sig:        [4]byte{0x20, 0x91, 0xaf, 0x26},
				ValueLimit: big.NewInt(0),
				ExecutionRule: ExecutionRule{
					ValidAfter: big.NewInt(177),
					Interval:   big.NewInt(5850),
					Runs:       big.NewInt(3),
				},
				Rules: []ParamRule{
					{
						Offset:    big.NewInt(0),
						Condition: EqualParamCondition,
						Param:     [32]byte(hexutil.MustDecode("0x0000000000000000000000000000000000000000000000000000000000000064")),
					},
					{
						Offset:    big.NewInt(32),
						Condition: GreaterThanParamCondition,
						Param:     [32]byte(hexutil.MustDecode("0x0000000000000000000000000000000000000000000000000000000000000064")),
					},
				},
			},
			proof: mt.Proof{
				Siblings: [][]byte{
					hexutil.MustDecode("0x3e1b0fd674a588568c3ca9ffcafc2fd125cc6e2b6b2b133977c02047d262b690"),
					hexutil.MustDecode("0x3001620487f821a0b18b4a3db22bea23f12abf535fac8e90064127ff10b9dbbc"),
				},
			},
			signature: "0x4c3c9c9fe28ea197cc260491393b8f6ed48e732fa94589e23d24bea387808cd760b087d62447586c96097682b1eedc2faeffc5981a328c07675b4880e0a79be81a423212cddc6141f9aeba18033026555e17c59a1b00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a6a84cd762d9707a21605b548aaab891562aab2091af26000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000b100000000000000000000000000000000000000000000000000000000000016dae1b0fd674a588568c3ca9ffcafc2fd125cc6e2b6b2b133977c02047d262b6903001620487f821a0b18b4a3db22bea23f12abf535fac8e90064127ff10b9dbbc",
		},
	}

	for _, tc := range tcs {
		signature, err := PackSessionKeySignatureWithSinglePermission(
			tc.sessionKey,
			tc.userOpHash,
			tc.permission,
			tc.proof,
		)

		if tc.expectedErrMsg != "" {
			assert.EqualError(t, err, tc.expectedErrMsg)
		} else {
			assert.NoError(t, err)
			assert.Equal(t, tc.signature, hexutil.Encode(signature))
		}
	}
}
