syntax = "proto3";

import "auth.proto";
import "core.proto";
import "settlement.proto";

option go_package = "github.com/layer-3/clearport/proto";

// protolint:disable MAX_LINE_LENGTH
service Operator {
  rpc GetVersion(VersionRequest) returns (VersionResponse);
  rpc GetIdentityAddress(GetIdentityAddressRequest) returns (GetIdentityAddressResponse);
  rpc GetChallenge(GetChallengeRequest) returns (GetChallengeResponse);
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);

  rpc OpenChannel(OpenChannelRequest) returns (OpenChannelResponse);
  rpc GetChannelJwt(GetJwtRequest) returns (GetJwtResponse);
  rpc GetPositions(GetPositionsRequest) returns (GetPositionsResponse);
  rpc RecordTrade(TradeRequest) returns (TradeResponse);
  rpc RecordTrades(TradesRequest) returns (TradesResponse);
  rpc RequestSettlement(SettlementRequest) returns (SettlementResponse);
  rpc CloseChannel(CloseChannelRequest) returns (CloseChannelResponse);

  rpc SubscribeChannelsEvents(SubscribeRequest) returns (stream Notification);
}

message VersionRequest {
}

message VersionResponse {
  string version = 1;
}

message GetIdentityAddressRequest {
}

message GetIdentityAddressResponse {
  core.Address address = 1;
}

message GetChallengeRequest {
}

message GetChallengeResponse {
  string challenge = 1;
}

message AuthenticateRequest {
  string challenge = 1;
  string signature = 2;
}

message AuthenticateResponse {
  string jwt = 1;
}

message TradeRequest {
  core.Trade trade = 1;
}

message TradeResponse {
  core.Trade trade = 1;
}

// Maximum number of trades per request is 6765
message TradesRequest {
  repeated core.Trade trades = 1;
}

message TradesResponse {
}

message OpenChannelRequest {
  auth.Peer peer = 1;
  string margin_deposit = 2;
}

message OpenChannelResponse{
  string channel_id = 1;
}

message GetJwtRequest {
  string channel_id = 1;
}

message GetJwtResponse {
  string jwt = 1;
}

message CloseChannelRequest {
  string channel_id = 1;
}

message CloseChannelResponse {
}

message SubscribeRequest {
}

message Notification {
  oneof notification {
    StreamNotification stream_notification = 1;
    SettlementNotification settlement_notification = 2;
    PositionNotification position_notification = 3;
    ErrorNotification error_notification = 4;
  }
}

enum ClearingEvent {
  CLEARING_EVENT_UNSPECIFIED = 0;
  CLEARING_EVENT_INSTANTIATED = 1;
  CLEARING_EVENT_ACCEPTED = 2;
  CLEARING_EVENT_FAILED = 3;
  CLEARING_EVENT_INITIATOR_FUNDED = 4;
  CLEARING_EVENT_RESPONDER_FUNDED = 5;
  CLEARING_EVENT_POSTFUND_PROPOSED = 6;
  CLEARING_EVENT_AGREED_ON_POSTFUND = 7;
  CLEARING_EVENT_MOVE_TO_OPERATIONAL = 8;
  CLEARING_EVENT_PROCESS_MARGIN_CALL = 9;
  CLEARING_EVENT_STARTED_SETTLEMENT = 10;
  CLEARING_EVENT_PROCESS_POST_SETTLEMENT_MARGIN = 11;
  CLEARING_EVENT_FINALIZE_SETTLEMENT = 12;
  CLEARING_EVENT_FAILED_SETTLEMENT = 13;
  CLEARING_EVENT_CHALLENGE = 14;
  CLEARING_EVENT_FINALIZE = 15;
  CLEARING_EVENT_WITHDRAW = 16;
  CLEARING_EVENT_CLEAR_CHALLENGE = 17;
  CLEARING_EVENT_TIMEOUT_CHALLENGE = 18;
}

enum ClearingState {
  CLEARING_STATE_UNSPECIFIED = 0;
  CLEARING_STATE_INSTANTIATED = 1;
  CLEARING_STATE_ACCEPTED= 2;
  CLEARING_STATE_FAILED = 3;
  CLEARING_STATE_INITIATOR_FUNDED = 4;
  CLEARING_STATE_FUNDED = 5;
  CLEARING_STATE_OPERATIONAL = 6;
  CLEARING_STATE_ISSUING_MARGIN_CALL = 7;
  CLEARING_STATE_PROCESSING_MARGIN_CALL = 8;
  CLEARING_STATE_ACTIVE_SETTLEMENT = 9;
  CLEARING_STATE_ISSUING_POST_SETTLEMENT_MARGIN = 10;
  CLEARING_STATE_PROCESSING_POST_SETTLEMENT_MARGIN = 11;
  CLEARING_STATE_CHALLENGING = 12;
  CLEARING_STATE_FINALIZING = 13;
  CLEARING_STATE_WITHDRAWING = 14;
  CLEARING_STATE_CONCLUDING = 15;
  CLEARING_STATE_DEFAULT = 16;
}

message StreamNotification {
  string channel_id = 1;
  ClearingEvent event = 2;
  ClearingState state = 3;
  core.ProtocolIndex my_role = 4;
  auth.Peer peer = 5;
  core.MarginLimitType margin_limit_type = 6;
  string margin_deposit = 7;
  string initiator_margin_balance = 8; // margin updates will be reflected here
  string follower_margin_balance = 9; // margin updates will be reflected here
  uint64 turn_num = 10;
}

message SettlementNotification {
  string channel_id = 1;
  settlement.SettlementState settlement_state = 2;
}

message PositionNotification {
  core.Position position = 1;
}

message ErrorNotification {
  string code = 1;
  string msg = 2;
  string err = 3;
  ErrorMetadata metadata = 4;
}

message SettlementRequest {
  string channel_id = 1;
  settlement.PaymentMethod payment_method = 2;
  uint64 chain_id = 3;
  repeated core.Market markets = 4;
}

message SettlementResponse {
}

message GetPositionsRequest {
  string channel_id = 1;
}

message GetPositionsResponse {
  string channel_id = 1;
  repeated core.Position positions = 2;
}

message ErrorMetadata {
  string channel_id = 1;
  string tx_id = 2;
}
