syntax = "proto3";

import "auth.proto";
import "core.proto";
import "settlement.proto";

option go_package = "github.com/layer-3/clearport/proto";

// protolint:disable MAX_LINE_LENGTH
service Operator {
  rpc GetVersion(VersionRequest) returns (VersionResponse);
  rpc GetIdentityAddress(GetIdentityAddressRequest) returns (GetIdentityAddressResponse);
  rpc GetChallenge(GetChallengeRequest) returns (GetChallengeResponse);
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);

  rpc OpenChannel(OpenChannelRequest) returns (OpenChannelResponse);
  rpc GetChannelJwt(GetJwtRequest) returns (GetJwtResponse);
  rpc GetPositions(GetPositionsRequest) returns (GetPositionsResponse);
  rpc RecordTrade(TradeRequest) returns (TradeResponse);
  rpc RequestSettlement(SettlementRequest) returns (SettlementResponse);
  rpc CloseChannel(CloseChannelRequest) returns (CloseChannelResponse);

  rpc SubscribeChannelsEvents(SubscribeRequest) returns (stream Notification);
}

message VersionRequest {
}

message VersionResponse {
  string version = 1;
}

message GetIdentityAddressRequest {
}

message GetIdentityAddressResponse {
  core.Address address = 1;
}

message GetChallengeRequest {
}

message GetChallengeResponse {
  string challenge = 1;
}

message AuthenticateRequest {
  string challenge = 1;
  string signature = 2;
}

message AuthenticateResponse {
  string jwt = 1;
}

enum Direction {
  DIRECTION_UNSPECIFIED = 0;
  DIRECTION_BUY = 1;
  DIRECTION_SELL = 2;
}

enum PositionStatus {
  POSITION_STATUS_UNSPECIFIED = 0;
  POSITION_STATUS_OPEN = 1;
  POSITION_STATUS_IN_SETTLEMENT = 2;
  POSITION_STATUS_SETTLED = 3;
  POSITION_STATUS_CLOSED = 4;
}

message Market {
  string base =1;
  string quote = 2;
}

message Trade {
  string channel_id = 1;
  string external_id = 2;
  Market market = 3;
  Direction direction = 4;
  core.Decimal amount = 5;
  core.Decimal price = 6;
  int64 executed_at = 7;
}

message Position {
  string channel_id = 1;
  Market market = 2;
  Direction direction = 3;
  string amount = 4;
  string cost = 5;
  string market_value = 6;
  string pnl = 7;
  PositionStatus status = 8;
}

message TradeRequest {
  Trade trade = 1;
}

message TradeResponse {
  Trade trade = 1;
}


message OpenChannelRequest {
  auth.Peer peer = 1;
  string margin_deposit = 2;
}

message OpenChannelResponse{
  string channel_id = 1;
}

message GetJwtRequest {
  string channel_id = 1;
}

message GetJwtResponse {
  string jwt = 1;
}

message CloseChannelRequest {
  string channel_id = 1;
}

message CloseChannelResponse {
}

message SubscribeRequest {
}


message Notification {
  oneof notification {
    StreamNotification stream_notification = 1;
    SettlementNotification settlement_notification = 2;
    PositionNotification position_notification = 3;
  }
}

enum NotificationType {
  NOTIFICATION_TYPE_UNSPECIFIED = 0;
  NOTIFICATION_TYPE_CHANNEL_OPENING = 1;
  NOTIFICATION_TYPE_CHANNEL_OPENED = 2;
  NOTIFICATION_TYPE_CHANNEL_CLOSED = 3;
  NOTIFICATION_TYPE_CHANNEL_SETTLED = 4;
  NOTIFICATION_TYPE_MARGIN_UPDATED = 5;
}

enum ChannelStatus {
  CHANNEL_STATUS_UNSPECIFIED = 0;
  CHANNEL_STATUS_OPENING = 1;
  CHANNEL_STATUS_OPEN = 2;
  CHANNEL_STATUS_SETTLING = 3;
  CHANNEL_STATUS_CLOSING = 4;
  CHANNEL_STATUS_CLOSED = 5;
}

enum ProtocolIndex {
  PROTOCOL_INDEX_UNSPECIFIED = 0;
  PROTOCOL_INDEX_INITIATOR = 1;
  PROTOCOL_INDEX_RESPONDER = 2;
}

message StreamNotification {
  string channel_id = 1;
  NotificationType notification_type = 2;
  ChannelStatus channel_status = 3;
  ProtocolIndex my_role = 4;
  auth.Peer peer = 5;
  string margin_deposit = 6;
  string initiator_margin_balance = 7; // margin updates will be reflected here
  string follower_margin_balance = 8; // margin updates will be reflected here
  uint64 turn_num = 9;
}

message SettlementNotification {
  string channel_id = 1;
  settlement.SettlementState settlement_state = 2;
}

message PositionNotification {
  Position position = 1;
}

message SettlementRequest {
  string channel_id = 1;
  settlement.PaymentMethod payment_method = 2;
  uint64 chain_id = 3;
  repeated Market markets = 4;
}

message SettlementResponse {
}

message GetPositionsRequest {
  string channel_id = 1;
}

message GetPositionsResponse {
  string channel_id = 1;
  repeated Position positions = 2;
}
